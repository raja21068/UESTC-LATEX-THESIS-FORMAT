%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: logo.dvi
%%CreationDate: Mon Nov 06 19:15:06 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 5516 1540
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips logo
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.11.06:1915
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 362832029 101255984 1000 600 600 (logo.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-600 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600
-600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 -600 a
%%HiResBoundingBox: 0 0 5536.37744pt 1545.0437pt

%%PageBoundingBox: 0 0 5516 1540
%%HiResPageBoundingBox: 0 0 5515.68022 1539.2677
%%BeginPageSetup
<< /PageSize [5515.68022 1539.2677] >> setpagedevice
0 0 bop
%%EndPageSetup
 0 TeXcolorgray 0 TeXcolorgray -600
12227 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 1884.01866
1226.91238 moveto 1883.71242 1226.44989 1883.39992 1225.9874 1883.09366
1225.52489 curveto 1884.62491 1219.28114 1888.77492 1214.72488 1891.43741
1209.75613 curveto 1896.68117 1199.97488 1898.52492 1181.88113 1899.3249
1170.33115 curveto 1901.02492 1145.70615 1883.05617 1113.11864 1874.28116
1096.13115 curveto 1853.03741 1055.00615 1825.13116 1022.8374 1808.42491
976.9374 curveto 1808.26866 972.91866 1808.11241 968.8999 1807.96242
964.88115 curveto 1806.68741 943.5749 1819.39366 948.45615 1825.58116
937.05615 curveto 1837.62491 914.88115 1837.78116 888.9749 1823.73117
867.9499 curveto 1820.52492 863.16866 1817.60617 856.80615 1813.06241
853.5749 curveto 1803.41241 846.7124 1792.71242 853.06241 1786.62492
860.53116 curveto 1781.24367 867.1374 1773.88116 874.4624 1770.39366
882.79366 curveto 1764.73117 896.31241 1761.68742 909.75615 1754.62492
921.2874 curveto 1753.23741 921.2874 lineto 1753.08116 921.13115 1752.92491
920.9749 1752.76866 920.8249 curveto 1752.79991 910.2749 1751.89992
901.96866 1750.44992 892.99365 curveto 1748.71242 882.20616 1751.63116
874.39366 1750.44992 864.24365 curveto 1748.74992 849.58116 1749.43742
836.13115 1749.52492 822.50616 curveto 1749.59367 811.80615 1748.22491
795.74365 1751.38116 785.3999 curveto 1758.78117 761.14366 1811.95616
762.93741 1832.07492 749.22491 curveto 1846.73741 739.23741 1846.31241
715.7624 1852.01866 697.74991 curveto 1855.54991 686.58742 1863.30617
664.94992 1870.10617 656.47491 curveto 1876.79366 648.13116 1885.34366
633.83742 1895.61241 629.57492 curveto 1910.87491 623.24367 1929.31241
623.76866 1950.3374 624.00616 curveto 1971.04991 623.54367 1991.76866
623.08116 2012.48116 622.61867 curveto 2019.91866 623.71866 2028.00615
628.72491 2034.28116 631.43117 curveto 2045.24991 636.15616 2070.98741
640.33742 2076.48741 649.04991 curveto 2086.23116 664.49367 2099.1999
690.08116 2074.16866 700.06866 curveto 2070.86865 701.38116 2065.1374
704.36241 2060.71866 703.77492 curveto 2044.55615 701.64366 2020.67491
695.77492 2003.20616 692.18117 curveto 1982.04366 687.83116 1960.65616
686.74991 1942.45616 684.29991 curveto 1924.24991 681.84366 1909.62491
689.64366 1905.81866 702.84991 curveto 1899.24991 725.59991 1931.89366
744.59991 1949.87491 752.47491 curveto 1964.56866 758.91241 1979.66241
759.06241 1989.29366 770.09366 curveto 2007.34366 790.76866 1988.7749
819.1999 1997.64366 849.3999 curveto 2005.43115 875.93741 2014.85616
902.1374 2029.64366 922.68115 curveto 2032.78116 927.0374 2037.6499
929.31241 2042.1624 932.41866 curveto 2052.5749 939.56865 2070.51866
960.6749 2073.6999 975.0874 curveto 2077.58115 992.64365 2045.9749
1013.04366 2036.5999 1021.9249 curveto 2020.8499 1036.85614 2004.37491
1051.84364 1987.43741 1065.51865 curveto 1979.2124 1072.16864 1965.99365
1079.21864 1961.00616 1088.70615 curveto 1956.03116 1098.16864 1960.37491
1115.18114 1959.1499 1125.3499 curveto 1954.40616 1164.6749 1954.81241
1220.34988 1884.01866 1226.91238 curveto closepath 3301.31235 1235.77489
moveto 3300.84985 1235.15614 3300.3811 1234.53738 3299.9186 1233.91864
curveto 3298.9936 1222.16864 3298.06235 1210.41864 3297.13734 1198.66864
curveto 3296.1561 1191.03114 3297.8436 1182.01865 3296.67485 1176.40614
curveto 3292.81235 1157.9249 3307.42485 1116.38739 3283.68735 1104.0624
curveto 3263.8686 1093.76865 3231.6311 1096.13739 3210.87485 1090.6124
curveto 3204.78735 1088.9874 3195.35611 1087.4999 3192.78735 1082.26239
curveto 3189.13736 1070.7874 3196.1561 1058.84364 3192.78735 1046.5499
curveto 3187.64986 1027.7999 3171.38736 997.5749 3180.73111 978.3749
curveto 3185.44986 968.6874 3197.28735 967.0499 3204.3811 959.8249
curveto 3204.60611 941.0124 3184.28735 911.93741 3174.23735 899.99991
curveto 3165.29985 889.3874 3151.2061 879.06865 3157.07486 857.79366
curveto 3162.2061 839.1999 3174.73735 832.94365 3195.10611 829.50615
curveto 3214.58736 829.50615 lineto 3232.4061 827.31865 3252.26234
839.74365 3261.42485 825.33116 curveto 3275.0686 803.8874 3268.42485
773.81241 3275.33736 742.78116 curveto 3276.1686 739.04991 3275.1186
729.04366 3276.2686 724.23116 curveto 3284.62485 689.23741 3282.79985
651.54991 3296.67485 619.41867 curveto 3302.1936 606.62492 3301.5811
590.88116 3309.1936 580.46242 curveto 3311.04985 580.46242 lineto 3318.41235
589.63116 3316.13734 603.46867 3318.4686 617.56242 curveto 3322.3186
640.76866 3321.24985 661.90616 3326.3561 685.27492 curveto 3331.4686
708.67491 3335.71234 733.17491 3344.9061 752.98116 curveto 3349.94984
763.84991 3360.03735 772.36865 3363.4561 784.98116 curveto 3365.07484
790.95616 3363.1561 796.25616 3363.9186 801.21866 curveto 3365.05609
808.58116 3364.05609 819.84991 3362.99359 826.2624 curveto 3359.7561
845.74365 3360.6311 862.61241 3364.84985 879.13115 curveto 3368.08734
891.8249 3375.4811 906.56865 3382.4686 916.69365 curveto 3393.54985
932.74365 3413.36235 947.01865 3407.9811 976.5249 curveto 3402.5311
1006.36865 3386.01234 1024.93115 3375.51234 1048.40614 curveto 3368.48735
1064.1124 3365.64984 1080.4749 3359.2811 1097.10614 curveto 3351.9061
1116.35614 3350.22485 1180.2499 3350.0061 1203.30614 curveto 3348.30609
1207.08115 3306.66235 1234.95615 3301.31235 1235.77489 curveto closepath
3090.29361 1233.44989 moveto 3060.01236 1216.68114 3025.31862 1155.76865
3016.5561 1116.58115 curveto 3016.39986 1111.63739 3016.2436 1106.6874
3016.08736 1101.74364 curveto 3009.66861 1072.7374 3012.06236 1036.9124
2997.07486 1016.40614 curveto 2992.8686 1010.65614 2959.23111 1000.5374
2950.69986 996.4624 curveto 2916.89987 980.3249 2873.02487 951.14365
2873.24986 903.24365 curveto 2874.79362 901.39365 2876.33737 899.5374
2877.88737 897.68115 curveto 2902.88112 897.06865 2918.44986 915.43115
2940.73111 918.46866 curveto 2950.33737 919.78116 2964.29987 915.04366
2959.51236 912.05615 curveto 2959.02487 901.71866 2950.33112 892.19365
2946.98737 883.30615 curveto 2939.73111 863.99365 2932.78111 846.23116
2923.79987 828.11241 curveto 2918.11237 816.6499 2908.63736 803.09366
2905.71237 790.0874 curveto 2900.67487 767.6999 2906.12486 740.53741
2914.98737 724.23116 curveto 2932.76236 720.7624 2937.75612 733.10616
2946.52487 739.99991 curveto 2962.18736 752.31866 2974.78111 763.91241
2991.51236 774.31866 curveto 2995.96236 777.0874 3011.62486 792.96866
3017.01862 790.0874 curveto 3032.19986 784.86865 3032.51236 723.79991
3023.04361 711.24367 curveto 3017.63736 704.06866 3008.39362 705.43117
3000.78737 701.04366 curveto 3000.63112 700.73116 3000.47487 700.42491
3000.31862 700.11241 curveto 3000.65611 686.20616 3027.54361 660.31241
3041.1311 659.76242 curveto 3067.1811 673.87491 3075.4436 710.81866
3067.10611 749.27492 curveto 3066.17487 765.03741 3065.24986 780.81241
3064.32486 796.58116 curveto 3060.61237 843.41866 lineto 3062.8811
852.99365 3081.93736 873.4124 3087.97485 881.9124 curveto 3100.4436
899.4624 3111.57486 919.87491 3121.8311 938.95615 curveto 3130.36235
954.83115 3137.23111 972.43115 3142.23735 991.3624 curveto 3143.77486
997.1874 3146.35611 1010.49365 3142.69986 1014.0874 curveto 3131.9436
1010.0499 3125.08736 994.5749 3119.04985 985.33115 curveto 3113.46861
976.7874 3106.16861 967.0124 3100.4936 958.43741 curveto 3093.41235
947.71866 3089.62486 936.35616 3081.48111 926.8999 curveto 3076.09361
920.6374 3052.26236 909.7624 3042.98737 919.94365 curveto 3030.71236
933.4124 3045.6186 965.8999 3043.44986 982.0874 curveto 3040.77486
1002.0874 3034.64986 1022.15614 3032.78737 1046.0874 curveto 3033.5561
1050.56865 3034.33112 1055.05615 3035.10611 1059.5374 curveto 3034.81236
1066.31865 3033.20612 1077.5999 3036.03111 1084.58115 curveto 3038.91861
1091.70615 3047.33112 1098.46864 3052.26236 1104.0624 curveto 3069.64362
1123.7499 3091.82486 1147.65614 3103.7436 1171.76865 curveto 3113.09361
1190.69363 3123.8686 1233.43114 3090.29361 1233.44989 curveto closepath
5454.16225 1249.3124 moveto 5444.72475 1238.38113 5444.78725 1218.00613
5436.97476 1205.71864 curveto 5427.91226 1191.46239 5419.72476 1176.29364
5410.09976 1162.1249 curveto 5405.91226 1155.96239 5399.16226 1150.2249
5395.22476 1144.0374 curveto 5390.84976 1137.06865 5377.22476 1115.28114
5382.28726 1105.08115 curveto 5391.53726 1104.68114 5398.84976 1103.39989
5407.28726 1106.4749 curveto 5418.16226 1110.4124 5424.97476 1121.08739
5437.91226 1124.09364 curveto 5467.53725 1130.9874 5509.91225 1123.14365
5526.97475 1147.28114 curveto 5529.28725 1150.58115 5537.59975 1165.89365
5536.22475 1171.39989 curveto 5535.16225 1174.33739 5534.09975 1177.27489
5532.97475 1180.21239 curveto 5524.16225 1213.64989 5511.22475 1222.03738
5484.28725 1237.71864 curveto 5474.84975 1243.20613 5468.78725 1249.45613
5454.16225 1249.3124 curveto closepath 3982.13107 1191.2499 moveto
3973.48106 1182.65614 3973.18732 1165.5624 3970.99982 1151.83115 curveto
3968.05608 1133.38739 3966.15607 1111.5999 3963.11232 1093.85614 curveto
3960.86858 1080.7499 3963.93732 1062.49365 3959.40607 1049.3374 curveto
3948.73106 1018.33115 3884.31857 1016.7999 3857.37483 997.85616 curveto
3837.47482 983.8624 3828.48732 960.65616 3814.24358 940.81241 curveto
3811.08733 936.4124 3799.85608 935.04366 3796.61858 940.3499 curveto
3790.49983 950.5374 3809.30608 979.0624 3813.78108 985.33115 curveto
3814.70607 987.9624 3815.63733 990.5874 3816.56233 993.21864 curveto
3828.63733 1019.25615 3853.25607 1047.78114 3845.78108 1085.04364 curveto
3845.78108 1106.38115 lineto 3844.02483 1113.14365 3839.41858 1122.6249
3834.64983 1126.7874 curveto 3826.28108 1134.08739 3799.16858 1138.73114
3788.73734 1130.03114 curveto 3780.29984 1122.99364 3762.53732 1064.78114
3763.69357 1048.86865 curveto 3764.27483 1040.8624 3758.86858 1013.7874
3754.41858 1010.84364 curveto 3743.04984 1003.30615 3687.61234 1009.93115
3687.16858 992.75615 curveto 3705.19359 979.40614 3722.17484 969.26865
3730.76233 946.37491 curveto 3735.59982 933.48116 3737.22482 914.24365
3734.01233 900.4624 curveto 3733.08109 896.1374 3732.15608 891.80615
3731.23108 887.4749 curveto 3731.61234 877.60616 3723.81859 866.3874
3720.56233 858.2624 curveto 3706.07483 822.11865 3673.36858 785.4624
3631.98108 777.09991 curveto 3622.81859 748.99367 3637.51233 718.27492
3656.56233 705.68117 curveto 3671.86858 705.64366 3684.43108 712.81866
3695.51859 716.80617 curveto 3701.94359 719.12491 3708.32483 725.93741
3715.92484 727.47491 curveto 3728.54984 730.03116 3743.40608 705.68741
3759.51859 708.46242 curveto 3776.18108 720.2624 3780.91858 746.5749
3782.70609 771.06866 curveto 3783.55608 782.71866 3779.56233 794.53741
3783.16858 806.31866 curveto 3790.45609 830.0874 3804.68733 845.36865
3817.95607 862.8999 curveto 3821.66232 866.29991 3825.37483 869.6999
3829.08733 873.0999 curveto 3833.12483 878.9499 3845.31233 894.3874
3851.34358 897.21866 curveto 3851.34358 896.2874 lineto 3861.39983
872.96866 3839.16858 847.5249 3851.81233 829.50615 curveto 3854.96233
825.01866 3859.06233 825.66866 3864.33107 823.0124 curveto 3879.60608
815.31866 3926.28107 789.08116 3927.86858 771.53741 curveto 3927.71233
771.06866 3927.55608 770.60616 3927.40607 770.14366 curveto 3919.04358
766.83116 3906.66858 759.54991 3894.94357 761.79366 curveto 3858.76233
768.71866 3834.87483 796.03116 3834.64983 839.70616 curveto 3832.79358
841.4124 3830.93733 843.11241 3829.08733 844.81241 curveto 3827.99983
844.9624 3826.91858 845.11865 3825.83733 845.2749 curveto 3822.91858
841.66866 3818.53108 839.2874 3815.63733 835.5374 curveto 3805.28732
822.12491 3797.08107 767.56866 3799.86858 747.88116 curveto 3801.36232
737.3249 3795.64357 726.06866 3799.40608 715.88116 curveto 3803.69357
705.51866 3834.56233 704.38116 3847.63733 700.5749 curveto 3871.44983
693.64992 3920.03107 694.66866 3945.95607 701.50616 curveto 3963.72482
706.19366 3990.83733 717.90616 4008.09982 712.16866 curveto 4016.39357
688.46242 4022.64357 672.34366 4040.09982 658.37491 curveto 4052.91232
648.12491 4076.51857 648.21866 4093.43732 647.24367 curveto 4143.71857
644.34991 4212.06856 647.07492 4252.04356 667.18741 curveto 4252.04356
669.50616 lineto 4244.28731 681.60617 4227.90605 678.14366 4213.08731
683.41867 curveto 4206.73106 685.68117 4199.84357 688.77492 4192.68106
692.23116 curveto 4182.47481 697.14992 4172.40607 706.65616 4162.99982
712.6374 curveto 4159.59981 714.18117 4156.19981 715.72491 4152.7998
717.27492 curveto 4142.19356 724.93117 4132.23732 733.20616 4120.79982
739.99991 curveto 4109.21231 746.87491 4099.69981 759.5124 4088.79982
767.36241 curveto 4084.06856 770.76866 4078.57481 773.9624 4074.41856
778.0249 curveto 4057.86856 794.2124 4070.04982 803.55615 4075.34981
820.23116 curveto 4075.49982 823.3249 4075.65607 826.4124 4075.81232
829.50615 curveto 4077.20607 833.06241 4078.59357 836.61865 4079.98732
840.17491 curveto 4080.14357 846.35616 4080.29356 852.54366 4080.44981
858.7249 curveto 4082.31856 873.30615 4085.69981 891.68115 4084.62482
905.56241 curveto 4083.54356 911.13115 4082.46231 916.69365 4081.37482
922.2624 curveto 4079.62482 936.18115 4081.73106 954.35616 4072.56856
962.14365 curveto 4056.59357 975.7249 4024.34982 951.7874 4003.92482
955.6499 curveto 4004.13731 961.1374 4001.20607 968.54366 4003.92482
974.66866 curveto 4013.30606 995.76865 4058.98106 1001.53114 4079.05606
1014.0874 curveto 4082.61232 1017.4874 4086.16856 1020.8874 4089.72481
1024.29366 curveto 4093.99982 1028.54366 4111.19981 1053.66864 4108.27481
1061.39365 curveto 4113.72481 1077.9374 4122.22481 1111.48114 4108.27481
1123.5374 curveto 4104.87482 1123.69365 4101.47481 1123.8499 4098.07481
1123.9999 curveto 4091.17482 1122.15614 4086.66856 1112.18114 4082.30606
1107.30614 curveto 4071.68106 1095.44365 4062.04982 1082.88739 4048.44981
1073.9124 curveto 4039.92482 1068.29364 4031.53107 1059.01239 4019.23106
1066.49365 curveto 4009.94981 1072.14365 4014.10606 1090.3124 4012.27481
1102.20615 curveto 4007.95607 1130.2374 4016.64357 1191.43114 3982.13107
1191.2499 curveto closepath 5181.47476 1207.1124 moveto 5178.34976
1206.49364 5175.28726 1205.8749 5172.16226 1205.25613 curveto 5166.97476
1203.4874 5159.84976 1195.58739 5156.84976 1191.34364 curveto 5152.97476
1185.85614 5152.09976 1178.91864 5150.34976 1171.39989 curveto 5148.97476
1166.45615 5147.59976 1161.50615 5146.22476 1156.5624 curveto 5143.53726
1147.9749 5149.72476 1137.9874 5151.78726 1132.90614 curveto 5160.41226
1111.64989 5162.59976 1104.61864 5180.97476 1093.0249 curveto 5184.41226
1090.5499 5187.78726 1088.07489 5191.16226 1085.5999 curveto 5193.59976
1083.0624 5194.16226 1079.1874 5197.22476 1077.25615 curveto 5205.34976
1072.13115 5228.72476 1077.59364 5235.22476 1082.35614 curveto 5235.84976
1116.9374 5224.22476 1191.22488 5202.34976 1202.47488 curveto 5196.09976
1205.64989 5188.78726 1206.26239 5181.47476 1207.1124 curveto closepath
2548.52489 678.90616 moveto 2584.09988 691.0124 2594.92488 721.48741
2605.64989 766.84991 curveto 2610.30614 786.38116 2602.00613 808.8999
2613.06863 823.89366 curveto 2621.78738 835.70616 2640.75613 838.34366
2656.66862 842.44365 curveto 2664.34363 844.42491 2672.68738 841.85616
2677.99988 845.2249 curveto 2684.34363 849.25615 2689.63113 859.7874
2684.02487 868.88115 curveto 2680.48112 874.6374 2672.69363 876.18741
2666.40613 879.54991 curveto 2659.49988 883.23741 2652.01237 890.75615
2645.06863 893.92491 curveto 2626.05612 897.6374 lineto 2613.15613
901.93115 2596.06238 905.60616 2582.92488 908.2999 curveto 2577.51237
908.14365 2572.10612 907.99365 2566.69363 907.8374 curveto 2550.04988
908.2999 2529.90613 910.1999 2524.95613 924.53116 curveto 2519.19989
941.18741 2532.33739 970.0374 2537.47488 982.04366 curveto 2554.75613
1022.40614 2593.85612 1094.88739 2557.88113 1141.1124 curveto 2549.82489
1151.46239 2533.19363 1160.6124 2519.38739 1164.76865 curveto 2511.23114
1167.2249 2503.23114 1166.3124 2495.73738 1169.86864 curveto 2491.02489
1167.5999 2489.71239 1163.48114 2485.9999 1160.59364 curveto 2472.48114
1150.09364 2461.86238 1136.88115 2450.28738 1124.41864 curveto 2450.44363
1123.64365 2450.59364 1122.8749 2450.7499 1122.0999 curveto 2459.15614
1106.55614 2488.69989 1102.88739 2495.27489 1084.06865 curveto 2498.21239
1075.6499 2493.17488 1057.8499 2491.56238 1047.89365 curveto 2485.39989
1009.89365 2473.59364 975.23116 2466.98114 940.2999 curveto 2463.34364
921.0874 2469.30614 892.31865 2454.92488 882.79366 curveto 2446.74364
877.37491 2433.58113 879.1499 2423.38739 880.4749 curveto 2417.51239
880.1624 2411.63739 879.85616 2405.76239 879.54991 curveto 2386.30614
881.7624 2352.50613 880.95616 2344.54364 865.63115 curveto 2339.29364
855.5249 2351.0374 840.90616 2351.96864 832.24365 curveto 2352.13739
830.67491 2369.23114 809.37491 2371.90614 805.34366 curveto 2381.64365
790.68741 2385.38739 771.26866 2388.13739 751.54366 curveto 2388.13739
703.31241 lineto 2388.77489 699.27492 2385.8124 692.3249 2389.06863
689.86241 curveto 2401.30614 682.56866 2418.36864 686.31866 2433.58739
681.98117 curveto 2478.71864 671.98117 2517.02489 668.18117 2548.52489
678.90616 curveto closepath 5287.16226 1194.1249 moveto 5271.72476
1184.34364 5265.84976 1139.23114 5280.22476 1125.02489 curveto 5285.47476
1119.8749 5292.41226 1121.39365 5300.16226 1121.77489 curveto 5317.34976
1121.77489 lineto 5323.59976 1124.3749 5329.28726 1131.2499 5332.66226
1137.08115 curveto 5334.78726 1140.8499 5340.03726 1147.18114 5339.59976
1152.8499 curveto 5338.41226 1168.11864 5302.84976 1192.71239 5287.16226
1194.1249 curveto closepath 4602.2248 1162.08115 moveto 4581.4123 1153.86864
4568.5998 1138.40614 4561.8498 1116.63115 curveto 4561.5373 1103.7999
4561.2248 1090.9624 4560.9123 1078.13739 curveto 4559.3498 1047.8999
4560.7248 1009.9124 4554.4123 983.0624 curveto 4552.2873 973.83115
4553.5998 963.9749 4549.3498 956.1624 curveto 4543.3498 945.14365 4539.6623
934.60616 4524.7248 929.7249 curveto 4516.5998 927.05615 4508.4748
928.60616 4500.1623 928.7999 curveto 4491.5373 928.49365 4482.8498
928.18115 4474.2248 927.87491 curveto 4444.2873 935.6124 4424.8498
927.85616 4412.0373 904.68115 curveto 4409.97481 900.89365 4403.09981
881.93741 4405.09981 875.46866 curveto 4411.7248 853.61865 4441.8498
846.18741 4464.9123 841.1499 curveto 4478.6623 838.14366 4501.4123
838.6374 4503.4123 824.4499 curveto 4505.2873 811.09991 4490.9748 802.91241
4483.9123 797.54991 curveto 4466.2248 784.04366 4448.9748 769.78116
4454.7248 740.97491 curveto 4456.5373 731.62491 4455.4748 721.09366
4462.5998 715.93117 curveto 4471.0373 709.8249 4517.8498 723.81241
4527.0373 725.66866 curveto 4576.7873 735.6999 4622.9123 776.67491
4638.3498 822.59366 curveto 4643.2248 837.0749 4644.9748 853.43741
4648.0998 868.04366 curveto 4650.2248 877.88115 4645.5998 892.24991
4651.3498 900.5124 curveto 4653.2873 903.30615 4664.2873 909.81241
4667.0998 911.64365 curveto 4692.7873 928.1374 4728.4123 931.9749 4759.41228
942.24991 curveto 4773.03728 946.76865 4788.84978 944.99365 4800.22478
952.4499 curveto 4808.66228 957.98116 4817.03728 971.9249 4814.16228
986.7749 curveto 4809.03728 989.8124 4803.84978 994.6499 4797.91228
996.9749 curveto 4780.34978 1003.81865 4737.7248 1008.98116 4719.0373
1000.21864 curveto 4703.0998 992.7374 4692.9748 980.20615 4678.7248
971.46864 curveto 4674.4123 968.84364 4668.5373 962.96864 4661.0998
966.36865 curveto 4661.6623 979.5749 4657.2248 1002.53114 4659.7248
1014.1374 curveto 4661.0998 1020.69365 4673.9748 1091.20615 4669.4123
1103.18114 curveto 4666.9123 1107.7874 4659.6623 1111.0374 4656.4748
1115.69989 curveto 4642.5373 1135.80614 4636.4748 1162.3624 4602.2248
1162.08115 curveto closepath 1954.5124 1051.60614 moveto 1975.04991
1051.69989 2016.96866 1013.16866 2008.31241 984.8249 curveto 2003.33116
968.53114 1993.09991 955.78116 1986.5124 942.15616 curveto 1977.84991
924.23116 1962.2124 907.12491 1937.34991 915.25615 curveto 1935.49991
927.93115 1933.64366 940.6124 1931.78741 953.2874 curveto 1928.11241
979.0749 1932.0749 1009.2499 1938.74367 1030.2749 curveto 1940.4624
1035.6874 1940.65616 1042.46864 1943.84366 1046.50615 curveto 1954.5124
1051.60614 lineto closepath 3256.78735 1036.3499 moveto 3285.99985
1032.5499 3279.03735 993.7499 3254.4686 988.11865 curveto 3242.41235
993.21864 lineto 3234.8686 998.01865 3227.9311 1015.09364 3234.06235
1025.21864 curveto 3239.01236 1033.38115 3248.59985 1031.2499 3256.78735
1036.3499 curveto closepath 5322.41226 1053.13739 moveto 5308.84976
1052.3624 5295.22476 1051.59364 5281.59976 1050.81865 curveto 5237.09976
1040.03114 5191.28726 1028.4374 5149.91226 1014.64365 curveto 5135.28726
1009.7749 5110.53726 1004.95615 5102.16226 994.6999 curveto 5094.47478
985.35616 5093.84978 970.06865 5089.16228 957.5999 curveto 5084.09978
944.08115 5068.66228 901.78116 5078.47478 887.10616 curveto 5084.09978
878.74365 5105.47476 865.01866 5119.78726 870.87491 curveto 5139.97476
879.15616 5141.59976 907.9499 5159.66226 917.71866 curveto 5170.66226
923.66866 5185.03726 921.49991 5197.66226 926.06241 curveto 5223.03726
935.2124 5246.16226 950.58115 5270.47476 961.7749 curveto 5285.53726
968.70615 5327.16226 987.18115 5341.47476 973.83115 curveto 5336.66226
953.49991 5308.41226 947.2374 5290.91226 939.0499 curveto 5260.97476
925.0499 5237.91226 915.48116 5222.28726 886.64366 curveto 5220.22476
882.93115 5216.34976 877.21866 5214.84976 873.19365 curveto 5211.03726
863.17491 5213.91226 832.88115 5219.91226 826.3499 curveto 5233.66226
811.49991 5245.41226 829.06241 5251.91226 837.48116 curveto 5265.59976
855.0249 5292.41226 903.48116 5322.91226 894.99365 curveto 5329.84976
879.68115 5329.22476 864.29991 5321.53726 849.0749 curveto 5308.03726
822.4624 5258.34976 774.37491 5226.91226 768.38116 curveto 5205.34976
764.26866 5177.03726 772.74365 5159.16226 777.19366 curveto 5148.47476
779.86241 5139.59976 787.61865 5129.97476 779.5124 curveto 5120.28726
771.3999 5119.84976 750.40616 5126.72476 738.6999 curveto 5136.34976
722.37491 5153.47476 710.9499 5167.09976 698.34991 curveto 5177.28726
688.89366 5185.91226 672.01242 5191.16226 659.85617 curveto 5200.09976
639.33116 5205.41226 613.19992 5227.34976 605.59367 curveto 5235.91226
602.64992 5258.16226 606.16867 5265.84976 605.59367 curveto 5277.59976
605.28741 5289.34976 604.98117 5301.09976 604.66867 curveto 5305.28726
603.52492 5320.66226 600.68117 5324.72476 601.88742 curveto 5339.84976
606.33116 5352.78726 618.04991 5360.47476 630.17491 curveto 5361.22476
633.57492 5362.03726 636.98117 5362.78726 640.38116 curveto 5370.84976
662.66867 5368.91226 701.40616 5386.41226 714.58116 curveto 5404.97476
728.53116 5432.09976 723.14992 5457.41225 728.96242 curveto 5473.59975
732.67491 5492.97475 733.44366 5487.09975 756.78741 curveto 5481.91225
777.18741 5449.72475 803.0124 5427.72476 804.55615 curveto 5411.72476
805.67491 5389.91226 793.16241 5377.59976 788.3249 curveto 5369.09976
784.96866 5361.72476 783.78741 5359.53726 793.42491 curveto 5354.84976
814.1499 5370.72476 846.31241 5378.53726 859.74365 curveto 5381.53726
864.9124 5386.72476 870.4624 5388.72476 876.43741 curveto 5390.66226
882.05615 5388.34976 886.13115 5389.22476 892.20616 curveto 5391.53726
907.99991 5390.66226 922.24365 5397.53726 933.9499 curveto 5409.41226
954.12491 5441.91225 965.9874 5435.59976 998.8749 curveto 5434.41226
1004.9874 5436.22476 1011.41866 5433.28726 1015.5749 curveto 5426.84976
1024.66866 5407.22476 1034.74365 5396.66226 1040.1499 curveto 5380.28726
1048.4874 5359.34976 1047.5499 5340.53726 1052.6749 curveto 5334.47476
1052.83115 5328.47476 1052.98114 5322.41226 1053.13739 curveto closepath
3879.17482 970.95615 moveto 3883.49982 969.25615 3887.83107 967.55615
3892.15607 965.85616 curveto 3894.78732 962.91866 3897.41232 959.98116
3900.04358 957.04366 curveto 3906.52483 953.36865 3919.43108 954.43115
3921.83733 946.84366 curveto 3921.53107 945.1374 3921.21857 943.43741
3920.91232 941.7374 curveto 3921.36858 939.11865 3922.67482 933.90616
3920.91232 929.68115 curveto 3916.26857 918.55615 3906.74358 907.4499
3891.23108 912.51865 curveto 3887.21233 914.68741 3883.19357 916.8499
3879.17482 919.0124 curveto 3872.26857 921.3249 3865.21857 915.5874
3861.08733 921.33115 curveto 3859.03108 928.70615 3874.70607 966.56865
3879.17482 970.95615 curveto closepath 3263.7436 899.0749 moveto 3255.59985
893.45616 3236.19986 885.06241 3225.7186 893.50615 curveto 3212.5936
904.06865 3235.2561 936.1999 3241.0186 943.59366 curveto 3281.1686
949.9499 3286.56235 914.63115 3263.7436 899.0749 curveto closepath
3007.28111 886.0874 moveto 3035.09987 882.74991 3008.59987 841.50615
2995.6811 860.58116 curveto 2987.45612 873.15616 3001.94362 880.76866
3007.28111 886.0874 curveto closepath 4013.20607 883.76866 moveto 4016.70607
883.8374 4018.88731 883.14366 4020.16232 880.98741 curveto 4029.06232
863.3999 4005.76857 823.1999 3989.08733 826.2624 curveto 3987.44357
832.29366 3988.62482 831.61241 3982.59357 829.96866 curveto 3971.46857
856.4624 3994.71233 875.5999 4013.20607 883.76866 curveto closepath
1935.9499 858.5249 moveto 1931.04366 856.6999 1926.14366 856.3874 1921.72491
858.18741 curveto 1918.96242 859.31241 1917.72491 860.66866 1917.26866
862.3874 curveto 1915.39992 869.38115 1919.3249 869.81865 1924.76866
871.61241 curveto 1934.29366 874.75615 1939.22491 873.1624 1935.9499
858.5249 curveto closepath 2521.70613 825.28741 moveto 2538.26239 802.24991
2517.97488 761.81241 2507.33113 745.51866 curveto 2501.63739 736.79991
2491.29364 729.23741 2481.35614 724.64366 curveto 2453.40614 735.54366
2430.51239 754.00616 2418.7499 780.7624 curveto 2412.61864 794.70616
2412.41864 816.98741 2424.3124 825.28741 curveto 2433.23114 831.50615
2451.90614 831.23741 2462.34364 834.0999 curveto 2475.13739 837.5999
2514.67488 835.06865 2521.70613 825.28741 curveto closepath 1935.96242
820.54991 moveto 1937.28116 818.09991 1937.39366 816.61241 1934.70616
815.17491 curveto 1930.61241 812.98116 1930.22491 814.4624 1928.86241
817.68115 curveto 1927.70616 820.41866 1928.51866 821.25616 1930.28116
822.35616 curveto 1933.69366 824.48741 1934.00616 824.19366 1935.96242
820.54991 curveto closepath 4688.4748 787.34991 moveto 4682.0998 787.19366
4675.7873 787.03741 4669.4123 786.8874 curveto 4660.0998 785.36865
4649.9748 782.6499 4643.0373 778.53741 curveto 4635.5998 743.00616
4666.9123 744.79991 4686.5998 731.69366 curveto 4694.6623 726.3249
4700.4748 715.21866 4707.0373 708.04366 curveto 4716.4748 697.58116
4734.2873 689.46866 4748.7248 684.39366 curveto 4760.22478 680.34991
4800.66228 681.41241 4805.34978 689.03116 curveto 4809.97478 700.54366
4802.34978 720.30617 4799.78728 727.05617 curveto 4788.09978 757.26866
4766.78728 773.33116 4734.8498 783.17491 curveto 4725.7248 785.98116
4713.0998 785.53116 4705.5998 786.8874 curveto 4699.7248 787.95616
4692.5373 786.00616 4688.4748 787.34991 curveto closepath 5274.66226
723.39366 moveto 5307.53726 724.22491 5312.59976 693.86241 5292.28726
678.87491 curveto 5275.16226 666.23117 5220.03726 670.84366 5224.09976
698.34991 curveto 5237.34976 714.03741 5254.34976 714.81866 5274.66226
723.39366 curveto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 772.52496 1296.03114
moveto 484.18747 1296.03114 249.01248 1060.8624 249.01248 772.51866
curveto 249.01248 484.18117 484.18747 249.00618 772.52496 249.00618
curveto 1060.86244 249.00618 1296.03745 484.18117 1296.03745 772.51866
curveto 1296.03745 1060.8624 1060.86244 1296.03114 772.52496 1296.03114
curveto closepath 772.52496 1545.04362 moveto 1198.01869 1545.04362
1545.04993 1198.01239 1545.04993 772.51866 curveto 1545.04993 347.03117
1198.01869 -0.00005 772.52496 -0.00005 curveto 347.03748 -0.00005 0.0
347.03117 0.0 772.51866 curveto 0.0 1198.01239 347.03748 1545.04362
772.52496 1545.04362 curveto closepath gsave 0 0.36078 0.63529  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 33.8875 789.99991
moveto 34.0125 789.86241 34.13124 789.71866 34.25624 789.5749 curveto
36.41249 789.51866 38.25624 790.45616 40.09999 790.87491 curveto 43.73125
791.6999 49.74374 790.68741 53.54999 789.91866 curveto 61.66875 788.28116
70.61249 779.56866 75.325 775.21866 curveto 86.73749 764.69366 94.65623
752.80617 108.01874 743.31866 curveto 109.30624 742.91241 110.59373
742.50616 111.87498 742.09991 curveto 118.65623 739.79366 118.20624
744.33116 122.44374 745.3249 curveto 130.68748 747.24367 139.08124
744.99367 144.63124 738.5749 curveto 145.89374 737.11867 147.68748
735.60616 148.33124 733.84991 curveto 149.69374 730.11867 146.68748
727.22491 143.73125 725.91866 curveto 141.11249 724.7624 138.09373
723.03741 135.0875 722.64366 curveto 130.2125 722.01866 125.5875 722.23116
121.23125 720.96866 curveto 121.19374 720.81866 121.15 720.66866 121.10625
720.51866 curveto 121.21873 720.33116 lineto 124.63124 719.39992 127.23749
718.36867 130.0125 717.10616 curveto 133.34999 715.58116 136.13124
715.83116 139.31248 714.54991 curveto 143.90623 712.69366 148.31248
711.71866 152.73125 710.53741 curveto 156.19374 709.60616 161.26874
707.73741 164.89374 707.83742 curveto 173.4 708.06866 177.54999 725.43117
183.76874 730.71866 curveto 188.30624 734.5749 195.86249 732.34991
202.19374 732.58742 curveto 206.11874 732.74367 213.80624 733.3249
217.15 734.76866 curveto 220.44998 736.19366 225.83124 737.68741 228.12498
740.62491 curveto 231.52498 744.99991 232.99998 751.0124 234.78749
757.83116 curveto 236.78123 764.49365 238.77498 771.1499 240.76874
777.80615 curveto 241.06874 780.31241 240.16873 783.37491 239.85623
785.64366 curveto 239.29999 789.61241 240.23749 798.30615 237.90623
800.86241 curveto 233.78123 805.3874 226.65623 811.85616 221.19998
804.6499 curveto 220.48123 803.6999 219.01248 802.11241 218.80624 800.62491
curveto 218.05624 795.2124 217.83124 786.9624 217.44374 780.99365 curveto
216.96873 773.7624 215.41249 766.74991 214.5875 760.64366 curveto 213.76248
754.53741 209.93748 750.49991 205.33124 750.44366 curveto 197.38748
750.34366 194.14374 762.59366 193.19998 769.10616 curveto 192.42499
774.43115 193.7125 779.33116 190.99998 783.42491 curveto 185.92499
791.09991 175.07498 787.62491 166.09373 793.18115 curveto 158.20624
798.05615 150.56874 803.43741 145.24374 810.04366 curveto 144.11249
811.4499 143.80624 813.22491 143.20624 814.9624 curveto 141.81874 818.9624
136.5875 826.64366 132.20624 828.95616 curveto 126.87498 831.7749 117.46873
823.36241 113.7625 821.11865 curveto 107.53123 817.35616 101.21873
813.35616 95.28749 809.09991 curveto 92.40623 807.0249 88.95 803.38116
85.4375 802.61241 curveto 81.93124 801.84366 76.81874 804.7624 73.41875
805.26866 curveto 60.28125 807.23116 42.3125 812.31241 33.8875 789.99991
curveto closepath 96.85625 797.2124 moveto 98.65623 803.86241 114.84373
813.99365 123.24374 808.66866 curveto 128.06874 805.61241 131.28123
801.16866 135.10625 797.8249 curveto 140.13124 793.43115 144.275 786.84991
139.43124 779.53741 curveto 135.16875 780.06241 130.90623 780.5874
126.6375 781.11865 curveto 117.96873 782.22491 108.56248 786.18741
102.35625 790.2124 curveto 100.75624 791.24991 98.58124 791.91866 97.56248
793.30615 curveto 97.325 794.60616 97.09373 795.90616 96.85625 797.2124
curveto closepath 157.65623 774.03741 moveto 157.81248 772.28741 157.48123
770.67491 156.49998 769.40616 curveto 155.89374 768.61241 155.34373
768.33116 154.74998 768.3374 curveto 152.31874 768.35616 152.525 769.66241
152.43124 771.5874 curveto 152.2625 774.94366 153.2125 776.39366 157.65623
774.03741 curveto closepath 169.94374 770.66241 moveto 170.84999 770.87491
171.34373 770.7749 171.56874 769.78116 curveto 171.91249 768.2624 171.4
768.2624 170.23749 768.11241 curveto 169.24998 767.98116 169.04999
768.31866 168.84999 768.98741 curveto 168.46873 770.2749 168.5875 770.35616
169.94374 770.66241 curveto closepath 559.84998 1457.47488 moveto 559.79997
1457.26237 559.74997 1457.04362 559.69997 1456.82487 curveto 560.83748
1453.60612 561.97498 1450.39363 563.10622 1447.18112 curveto 563.74997
1445.04362 565.24997 1442.85612 565.59998 1441.23738 curveto 566.74997
1435.89989 575.49997 1426.63113 570.66872 1420.58739 curveto 566.63747
1415.53113 557.83748 1412.36864 552.99997 1408.46863 curveto 551.58122
1407.32487 549.26247 1405.82487 549.19997 1404.13737 curveto 549.58122
1400.67488 552.84372 1398.34363 553.39372 1394.69987 curveto 554.24373
1389.13737 553.49373 1379.23112 558.21872 1375.25613 curveto 560.60622
1373.24364 563.93123 1374.20613 566.65622 1373.13113 curveto 568.92497
1368.18114 566.96872 1358.10614 565.71248 1353.76863 curveto 564.59998
1349.91238 562.08748 1345.53113 566.13747 1340.59363 curveto 569.68121
1336.28113 573.72498 1336.09988 579.51872 1337.58739 curveto 581.23122
1338.34988 582.94997 1339.11238 584.66872 1339.87488 curveto 589.63123
1341.39363 593.42497 1347.00613 597.53748 1344.27489 curveto 603.66872
1340.20613 605.44373 1331.47488 610.91872 1324.08739 curveto 611.57497
1323.19363 612.47498 1320.42488 613.34372 1319.28738 curveto 619.66872
1311.01863 623.61871 1300.84364 631.05621 1293.97488 curveto 634.01872
1291.24364 635.71246 1287.00613 638.94997 1285.14989 curveto 639.11247
1285.21864 639.27496 1285.29364 639.43747 1285.36864 curveto 640.30621
1288.65614 638.08122 1292.04988 637.03746 1296.04988 curveto 635.33122
1302.63739 632.56247 1308.09988 631.16872 1314.87488 curveto 629.76872
1321.66238 628.01247 1328.63739 628.11247 1334.95613 curveto 628.16872
1338.42488 629.83746 1341.86238 629.25623 1345.59988 curveto 628.98747
1347.36864 627.85622 1348.54364 627.47498 1349.94363 curveto 626.90622
1352.02489 625.31873 1354.88739 624.28748 1356.45613 curveto 621.13747
1361.22488 619.38747 1365.79364 618.56247 1370.64989 curveto 617.92497
1374.39363 618.14996 1379.15613 618.80621 1382.65613 curveto 619.84998
1388.19987 623.41248 1394.30614 618.51872 1401.46863 curveto 613.56873
1408.71863 607.02496 1411.68738 601.48747 1416.66238 curveto 597.78748
1419.98738 595.11247 1423.98112 591.47498 1427.62488 curveto 587.26247
1431.84988 579.30621 1448.54988 576.54372 1454.61862 curveto 575.64996
1455.41238 561.36247 1457.88737 559.84998 1457.47488 curveto closepath
504.33122 1432.06238 moveto 498.29997 1424.07487 496.28748 1403.89363
498.57497 1392.49988 curveto 499.11247 1391.17488 499.65622 1389.84988
500.19373 1388.52489 curveto 501.90622 1380.09988 506.74997 1370.91238
505.19373 1363.72488 curveto 504.75623 1361.71239 497.05623 1355.08739
495.27498 1353.00613 curveto 488.23747 1344.76863 480.06873 1331.89363
485.75623 1319.25613 curveto 486.38123 1318.94989 487.00623 1318.63739
487.63748 1318.33113 curveto 494.31247 1321.10614 496.27498 1327.78738
501.80623 1331.21239 curveto 504.19373 1332.68738 508.44373 1333.07489
507.52498 1331.72488 curveto 508.61247 1328.93114 507.43123 1325.39363
507.59372 1322.64989 curveto 507.94373 1316.69363 508.19373 1311.18114
507.94997 1305.33113 curveto 507.79372 1301.63739 506.88123 1296.9374
507.63747 1293.15614 curveto 508.93747 1286.64363 513.56873 1280.09988
517.82497 1276.83113 curveto 522.93747 1278.00613 522.80623 1281.85614
524.31247 1284.70613 curveto 527.00623 1289.80614 528.97498 1294.34988
532.17497 1299.06863 curveto 533.02498 1300.32489 535.29997 1306.36238
537.06247 1306.23738 curveto 541.69373 1306.63739 548.94997 1290.53114
547.92497 1286.09988 curveto 547.33748 1283.5624 544.73122 1282.83739
543.23747 1280.78738 curveto 543.23122 1280.68114 543.23122 1280.58739
543.22498 1280.48738 curveto 544.94997 1276.84988 555.09998 1273.16238
558.75623 1274.61238 curveto 563.98747 1281.40614 561.82497 1292.14363
555.09998 1301.33113 curveto 553.00623 1305.38739 550.90622 1309.44989
548.80623 1313.51239 curveto 546.64998 1317.49364 544.48747 1321.47488
542.32497 1325.45613 curveto 541.79997 1328.25613 544.43747 1335.89363
545.03122 1338.84988 curveto 546.26872 1344.95613 546.81247 1351.66238
547.28122 1357.91238 curveto 547.66872 1363.11238 547.41872 1368.56863
546.51872 1374.16238 curveto 546.23747 1375.88737 545.35622 1379.70613
543.96872 1380.22488 curveto 541.59998 1377.89363 541.60622 1372.99988
541.09372 1369.84363 curveto 540.62497 1366.93114 539.84372 1363.48738
539.34998 1360.55614 curveto 538.73747 1356.88739 539.07497 1353.43738
538.03122 1349.98114 curveto 537.34372 1347.69363 532.31873 1342.01863
528.66872 1343.61864 curveto 523.84372 1345.73738 523.96248 1356.08113
521.48747 1360.10614 curveto 518.43123 1365.07489 514.45622 1369.66238
511.14998 1375.76863 curveto 510.82497 1377.04988 510.50623 1378.32487
510.18123 1379.59988 curveto 509.30623 1381.35612 507.55623 1384.14989
507.48122 1386.33113 curveto 507.41248 1388.54988 508.83748 1391.33113
509.48747 1393.38737 curveto 511.76872 1400.63737 514.82497 1409.56238
515.13747 1417.33739 curveto 515.38747 1423.44363 513.21248 1436.00613
504.33122 1432.06238 curveto closepath 571.51872 1399.51863 moveto
579.68747 1401.94987 582.40622 1390.86864 576.56873 1386.49364 curveto
575.30621 1386.47488 574.04372 1386.44987 572.78122 1386.42488 curveto
570.22498 1386.81238 566.38123 1390.51237 566.81873 1393.90613 curveto
567.16248 1396.64363 569.94997 1397.21239 571.51872 1399.51863 curveto
closepath 589.48747 1364.04364 moveto 587.99371 1361.59988 583.84998
1357.10614 580.08746 1358.10614 curveto 575.38123 1359.35614 577.59372
1370.51239 578.24997 1373.14363 curveto 588.11247 1379.54362 593.69373
1370.83739 589.48747 1364.04364 curveto closepath 523.20622 1330.46863
moveto 530.95622 1332.85614 528.79372 1318.83739 523.13747 1322.36238
curveto 519.48747 1324.72488 522.42497 1328.43738 523.20622 1330.46863
curveto closepath 1531.26868 752.94366 moveto 1527.26244 754.83742
1521.23119 753.16241 1516.95618 754.47491 curveto 1511.99368 755.99367
1506.82494 757.19366 1501.84367 758.8874 curveto 1499.67493 759.62491
1497.43118 761.15616 1495.27493 761.81241 curveto 1492.84993 762.54991
1485.28743 764.81866 1482.67493 762.48741 curveto 1483.31242 759.6999
1483.53117 757.43741 1485.13118 755.17491 curveto 1487.18118 752.27492
1490.89993 751.13116 1492.84367 747.54366 curveto 1497.29993 739.33742
1498.43118 726.14366 1506.97493 723.04991 curveto 1508.13744 722.63116
1513.34993 721.42491 1514.87492 722.26866 curveto 1515.65617 722.83116
1516.43742 723.39366 1517.21867 723.9499 curveto 1526.41243 729.28116
1527.83743 733.80617 1530.28743 743.06241 curveto 1531.14993 746.30617
1532.50618 748.61867 1531.26868 752.94366 curveto closepath 1496.53743
830.29991 moveto 1496.10619 831.1624 1495.66869 832.03116 1495.23119
832.89366 curveto 1494.28743 834.2874 1491.36868 835.74991 1489.86243
836.29366 curveto 1487.92493 836.99991 1485.79369 836.69365 1483.42493
836.59366 curveto 1481.84367 836.60616 1480.26868 836.61241 1478.68742
836.62491 curveto 1475.92493 836.71866 1473.47493 834.06865 1472.13744
833.04366 curveto 1466.53743 828.75615 1464.63744 827.53116 1462.69994
821.1374 curveto 1462.24368 819.93115 1461.78743 818.71866 1461.33118
817.5124 curveto 1460.78117 816.58116 1459.67493 816.11241 1459.34993
815.04366 curveto 1458.49368 812.21866 1462.01868 805.73116 1463.96243
804.19366 curveto 1474.25618 806.8374 1495.31868 816.33116 1496.86868
823.73741 curveto 1497.30618 825.83116 1496.88118 828.05615 1496.53743
830.29991 curveto closepath 1501.31242 797.91241 moveto 1497.14993
801.6999 1483.30618 799.7624 1480.26868 794.3374 curveto 1479.16869
792.37491 1480.18742 790.43741 1480.93118 788.16866 curveto 1481.39993
786.47491 1481.86243 784.7749 1482.33118 783.08116 curveto 1483.61243
781.43741 1486.11243 780.31241 1488.11243 779.79366 curveto 1489.40617
779.4624 1491.71243 778.42491 1493.34993 779.01866 curveto 1497.78117
780.61865 1502.16869 793.16241 1501.31242 797.91241 curveto closepath
1462.41243 775.97491 moveto 1458.39993 787.88116 lineto 1451.57494
800.18741 1444.39993 812.8249 1436.94368 823.95616 curveto 1434.31244
827.88115 1430.86868 834.8374 1427.14368 836.48116 curveto 1423.74994
837.98741 1419.16869 836.94365 1415.09369 837.30615 curveto 1410.67493
837.70616 1396.88118 838.8374 1393.33743 834.7249 curveto 1391.31244
832.37491 1388.99368 824.92491 1391.89368 821.16866 curveto 1395.99368
815.86241 1404.64993 817.73116 1409.01868 813.16866 curveto 1411.68118
810.39366 1412.20618 805.9624 1414.59369 802.58116 curveto 1419.36868
795.81866 1425.80618 790.21866 1431.10619 783.91866 curveto 1434.39368
780.01866 1443.25618 769.20616 1440.46243 763.88116 curveto 1434.04993
763.6374 1429.88744 771.49991 1426.03743 776.0249 curveto 1419.44994
783.75616 1414.73743 789.80615 1404.91869 792.0874 curveto 1403.64993
792.38116 1401.64368 793.06241 1400.32494 793.18741 curveto 1397.04369
793.50616 1388.30618 790.17491 1386.86244 787.86241 curveto 1383.58119
782.59366 1389.74368 780.53741 1392.76868 779.28741 curveto 1399.07494
776.68115 1415.62494 772.66866 1415.59369 762.9499 curveto 1411.61868
759.6499 1407.01244 758.5749 1401.87494 759.62491 curveto 1392.88744
761.4499 1374.59369 772.24991 1370.25618 781.0749 curveto 1367.28119
787.13116 1367.48119 796.20616 1367.34369 801.85616 curveto 1367.26869
805.24365 1368.84369 808.50616 1365.65619 810.6999 curveto 1362.46243
812.8999 1356.20619 811.33116 1353.29369 808.3374 curveto 1349.24368
804.16241 1347.25618 798.14366 1344.63118 793.09366 curveto 1342.66243
789.30615 1338.36244 785.36865 1335.19368 782.81241 curveto 1329.83743
778.49365 1322.52493 774.79366 1322.06244 767.66866 curveto 1321.88118
764.90616 1324.74368 758.59366 1325.19994 756.26866 curveto 1326.06868
752.7624 1326.93118 749.25616 1327.79994 745.74991 curveto 1327.79994
744.40616 1328.21243 739.63116 1328.89993 738.5124 curveto 1331.44994
734.40616 1335.97493 731.52492 1340.19368 730.23741 curveto 1341.26244
730.28741 1342.33119 730.33742 1343.40619 730.38116 curveto 1350.66243
729.81241 1361.98119 733.54366 1367.31868 729.42491 curveto 1372.96243
725.06241 1373.57494 716.59991 1377.36244 709.56866 curveto 1379.78119
705.08116 1381.58743 699.39992 1388.02493 703.04366 curveto 1393.64993
706.23116 1398.67493 717.86867 1397.33743 724.52492 curveto 1396.36868
729.34991 1390.88744 734.78741 1388.44994 738.04366 curveto 1386.75618
740.29991 1385.80618 742.39366 1388.48744 743.81866 curveto 1394.24368
746.8874 1405.06868 744.80617 1409.68744 743.58742 curveto 1411.46243
743.11867 1413.52493 742.03741 1415.46243 741.92491 curveto 1417.28119
741.8249 1418.29993 742.84366 1420.17493 743.0749 curveto 1425.03743
743.67491 1429.18744 745.08742 1433.21869 744.00616 curveto 1440.16243
742.13116 1446.32494 733.47491 1455.55618 738.02492 curveto 1457.26868
738.87491 1459.32494 738.86241 1460.31242 740.0749 curveto 1462.48119
742.72491 1463.87492 749.34991 1464.61243 752.93117 curveto 1465.74992
758.45616 1463.76244 764.5874 1463.74992 770.58116 curveto 1463.29993
772.38116 1462.85619 774.18115 1462.41243 775.97491 curveto closepath
1360.81868 763.25616 moveto 1363.74368 753.59366 1355.15619 749.61241
1349.06244 754.40616 curveto 1343.92494 758.4499 1340.79369 775.16241
1349.28119 776.19366 curveto 1355.00618 773.55615 1356.62494 768.56866
1360.81868 763.25616 curveto closepath 1052.41245 1432.31863 moveto
1048.78745 1430.69987 1046.7312 1425.53113 1044.4812 1421.60612 curveto
1041.4562 1416.33113 1038.36246 1409.91862 1035.3937 1404.86864 curveto
1033.19995 1401.13737 1032.02495 1395.23112 1029.1312 1391.74988 curveto
1022.3062 1383.54362 1002.52495 1390.50613 992.13745 1387.84988 curveto
984.4687 1385.88737 979.0562 1379.86238 972.4312 1375.46239 curveto
970.9687 1374.48738 967.38745 1375.36238 967.0187 1377.34988 curveto
966.3312 1381.15613 975.3437 1387.66862 977.42496 1389.06238 curveto
978.01245 1389.75613 978.59995 1390.44987 979.1812 1391.14363 curveto
985.86246 1397.67488 996.6437 1403.51863 998.6687 1415.71863 curveto
999.48746 1417.88737 1000.3062 1420.04988 1001.12495 1422.21239 curveto
1001.37495 1424.47488 1001.06245 1427.88737 1000.0937 1429.70613 curveto
998.38745 1432.89363 990.6687 1437.43738 986.4937 1435.98738 curveto
983.11246 1434.82487 970.9937 1419.15613 969.51245 1414.18114 curveto
968.76245 1411.67488 963.9937 1404.05614 962.29996 1403.67488 curveto
957.97496 1402.69363 941.8687 1411.09988 939.74995 1405.92488 curveto
943.69371 1399.78113 947.69371 1394.73738 947.6687 1386.78113 curveto
947.6562 1382.29988 945.9312 1376.25613 943.36246 1372.43738 curveto
942.5812 1371.22488 941.79996 1370.01239 941.0187 1368.80614 curveto
939.9937 1365.75613 936.3312 1363.23738 934.39995 1361.14363 curveto
925.82495 1351.81238 911.6437 1344.43114 898.0812 1346.65613 curveto
892.05621 1339.16238 892.9812 1328.11864 897.32495 1322.08739 curveto
901.9812 1320.31238 906.63121 1321.04364 910.4687 1320.98114 curveto
912.68745 1320.94363 915.41246 1322.28113 917.9062 1321.87488 curveto
922.0437 1321.19363 923.75621 1312.07489 928.9812 1311.05614 curveto
935.41246 1312.73114 939.88745 1320.18738 943.25621 1327.43738 curveto
944.86246 1330.88739 945.00621 1334.94363 947.4687 1338.11238 curveto
952.42496 1344.50613 958.5187 1347.51863 964.57495 1351.31863 curveto
966.09996 1351.93114 967.6187 1352.53738 969.1437 1353.14363 curveto
971.0437 1354.45613 976.53746 1357.74988 978.69995 1357.91238 curveto
978.66245 1357.81863 978.62495 1357.72488 978.5937 1357.63113 curveto
978.96245 1349.37488 969.26245 1344.19363 971.0312 1337.25613 curveto
971.4687 1335.52489 972.7937 1335.24988 974.0937 1333.83113 curveto
977.84996 1329.73114 989.0312 1316.36238 987.4937 1310.83739 curveto
987.3937 1310.71239 987.28745 1310.59363 987.18745 1310.46863 curveto
984.26245 1310.42488 979.6562 1309.63739 976.34996 1311.66864 curveto
966.13121 1317.94989 962.0187 1329.01863 966.98746 1342.33739 curveto
965.88121 1344.53113 lineto 965.56871 1344.70613 965.25621 1344.87488
964.94371 1345.04988 curveto 963.63745 1344.28738 962.0312 1344.06863
960.7187 1343.26239 curveto 956.0187 1340.37488 947.2312 1324.71239
945.8062 1318.39989 curveto 945.0437 1315.01863 942.00621 1312.24988
941.97496 1308.71863 curveto 942.08745 1305.06863 951.34996 1301.16238
954.8937 1298.49364 curveto 961.33745 1293.64363 976.2437 1288.34988
984.9187 1287.4374 curveto 990.8687 1286.81863 1000.4687 1287.25613
1005.06245 1283.51863 curveto 1004.84995 1275.34364 1004.8937 1269.71864
1008.59995 1263.45613 curveto 1011.31245 1258.85614 1018.51245 1256.16238
1023.5437 1253.91864 curveto 1038.51245 1247.23738 1059.6312 1240.18114
1074.1187 1241.69363 curveto 1074.20619 1241.92488 1074.2937 1242.16238
1074.38745 1242.39989 curveto 1073.4187 1246.97488 1068.03745 1247.8124
1064.1312 1251.1249 curveto 1062.46245 1252.54988 1060.7187 1254.28114
1058.93745 1256.16238 curveto 1056.39995 1258.83739 1054.4312 1262.89363
1052.26245 1265.79364 curveto 1051.4062 1266.65614 1050.5437 1267.51863
1049.68745 1268.38113 curveto 1047.3437 1271.9374 1045.2687 1275.60614
1042.5687 1278.98738 curveto 1039.83745 1282.41864 1038.39995 1287.36238
1035.98746 1291.00613 curveto 1034.9437 1292.58739 1033.63745 1294.19989
1032.8437 1295.91238 curveto 1029.67496 1302.7499 1034.4562 1304.1874
1037.9937 1308.64989 curveto 1038.3937 1309.57489 1038.79996 1310.49364
1039.19995 1311.41864 curveto 1040.03745 1312.34363 1040.8687 1313.26239
1041.7062 1314.18114 curveto 1042.46245 1316.04988 1043.22495 1317.91238
1043.9812 1319.77489 curveto 1046.2312 1323.99988 1049.38745 1329.19989
1050.6562 1333.54988 curveto 1051.5937 1339.00613 lineto 1052.6687
1343.44363 1055.4062 1348.73114 1053.51245 1352.16238 curveto 1050.2187
1358.13739 1037.6437 1354.56863 1031.87495 1358.09988 curveto 1032.5687
1359.74988 1032.5312 1362.33739 1034.0687 1363.88739 curveto 1039.3562
1369.23114 1053.9187 1365.71239 1061.4812 1367.21863 curveto 1062.95619
1367.84363 1064.42494 1368.46863 1065.89995 1369.09363 curveto 1067.6937
1369.89363 1075.82495 1375.56238 1075.82495 1378.24988 curveto 1079.39369
1382.65613 1085.84995 1391.88113 1082.9937 1397.16238 curveto 1081.97495
1397.59988 1080.96245 1398.03738 1079.9437 1398.48112 curveto 1077.6312
1398.71239 1075.1062 1396.19987 1073.2187 1395.21863 curveto 1068.6187
1392.83113 1064.23744 1390.11864 1059.06245 1388.96239 curveto 1055.8187
1388.23112 1052.1937 1386.37488 1049.31245 1390.06863 curveto 1047.14369
1392.85612 1050.49995 1397.91238 1051.3187 1401.74364 curveto 1053.23744
1410.76863 1062.93745 1428.39363 1052.41245 1432.31863 curveto closepath
995.67496 1377.14989 moveto 996.7937 1376.13113 997.91245 1375.11238
999.03745 1374.09988 curveto 999.4937 1372.89989 999.9562 1371.70613
1000.4187 1370.50613 curveto 1001.9687 1368.63739 1006.0187 1367.47488
1005.87495 1364.88739 curveto 1005.58745 1364.40613 1005.2937 1363.92488
1005.0062 1363.43738 curveto 1004.8437 1362.59363 1004.63745 1360.85614
1003.61246 1359.77489 curveto 1000.9187 1356.92488 996.73746 1354.63739
992.59995 1357.97488 curveto 991.62495 1359.09363 990.6562 1360.21863
989.6812 1361.33739 curveto 987.8437 1362.83739 985.03745 1361.90613
984.4437 1364.13113 curveto 984.6687 1366.61238 993.8062 1376.32487
995.67496 1377.14989 curveto closepath 1026.4062 1335.15613 moveto
1027.4812 1334.76863 1028.06245 1334.30614 1028.19995 1333.50613 curveto
1028.88745 1327.12488 1017.1562 1317.58113 1012.43745 1320.43114 curveto
1012.6312 1322.46239 1012.91245 1322.11864 1010.88745 1322.31238 curveto
1010.5562 1331.65613 1019.83745 1334.79988 1026.4062 1335.15613 curveto
closepath 347.18123 1098.8999 moveto 349.33748 1112.2499 341.47498
1120.83739 328.86873 1131.9124 curveto 323.44373 1136.6874 314.88123
1137.85614 311.98123 1143.89989 curveto 309.69998 1148.66864 312.06248
1155.14365 313.44998 1160.89365 curveto 314.11249 1163.66864 316.33748
1165.88739 316.16248 1168.14365 curveto 315.95624 1170.84364 313.49998
1174.2999 309.66248 1174.05614 curveto 307.23123 1173.89989 305.42499
1171.6874 303.29373 1170.25613 curveto 300.95624 1168.68114 297.29999
1167.56865 295.12498 1165.89989 curveto 293.65623 1164.09364 292.19373
1162.2874 290.73123 1160.48114 curveto 287.18748 1157.10614 283.13124
1152.29364 280.05623 1148.56865 curveto 279.19374 1146.82489 278.33124
1145.08115 277.46248 1143.33115 curveto 274.50624 1138.11864 270.49998
1132.0374 265.10623 1132.88115 curveto 258.84373 1133.8624 251.88748
1142.9124 248.94374 1146.57489 curveto 239.02498 1158.88115 222.5875
1183.5499 201.81248 1179.91864 curveto 197.16249 1179.10614 191.44374
1175.3624 187.79373 1171.6749 curveto 185.63748 1169.49364 184.57498
1166.7999 182.17499 1165.01865 curveto 182.10623 1163.13739 183.19374
1162.02489 183.48123 1160.35614 curveto 184.53749 1154.2874 186.94374
1148.68114 188.94998 1142.89365 curveto 189.22499 1142.8124 189.49374
1142.73114 189.76874 1142.64989 curveto 196.13124 1142.69989 202.28749
1151.46864 209.37498 1150.38115 curveto 212.54999 1149.89365 217.35623
1145.2874 220.24998 1143.09364 curveto 231.29373 1134.71864 240.31874
1125.1124 250.30623 1117.1124 curveto 255.79999 1112.71239 265.95624
1109.7499 266.55623 1103.56865 curveto 266.89374 1100.0499 264.10623
1096.16864 261.96248 1093.1499 curveto 261.07498 1091.23114 260.18123
1089.3124 259.28749 1087.39365 curveto 255.29373 1081.58115 249.84373
1070.69989 253.36873 1065.58115 curveto 255.69998 1062.20615 262.32498
1063.46864 265.23749 1062.2999 curveto 265.76248 1062.0874 275.42499
1063.9249 277.15623 1064.0999 curveto 283.46248 1064.71864 290.26874
1062.63115 297.00623 1060.1749 curveto 302.11249 1057.4624 307.22498
1054.74365 312.33748 1052.03114 curveto 313.73123 1051.5499 315.43748
1049.43115 316.76874 1050.05615 curveto 321.15623 1052.7124 322.84373
1058.7749 326.79373 1062.8749 curveto 337.59373 1075.5374 345.26874
1087.07489 347.18123 1098.8999 curveto closepath 296.11249 1115.08739
moveto 306.23123 1116.46239 315.66248 1103.1874 319.04373 1097.0499
curveto 320.85623 1093.76865 321.51248 1089.19989 321.29373 1085.26865
curveto 313.11249 1078.2249 303.37498 1074.0624 292.88123 1074.8374
curveto 287.41249 1075.24365 280.29999 1078.94365 279.66873 1084.1249
curveto 279.19998 1088.01239 282.43123 1093.90614 283.28749 1097.70615
curveto 284.33748 1102.3624 291.81248 1114.50615 296.11249 1115.08739
curveto closepath 1294.89369 1056.16864 moveto 1293.31244 1057.82489
1291.73744 1059.4874 1290.16245 1061.1499 curveto 1287.48744 1063.28114
1284.31244 1065.32489 1281.51869 1066.19989 curveto 1270.21243 1059.57489
1278.27493 1051.63115 1279.54369 1043.1749 curveto 1280.06244 1039.70615
1278.49994 1035.4624 1278.15619 1031.98114 curveto 1277.64993 1026.90614
1279.79369 1020.1749 1281.93744 1015.0749 curveto 1283.64369 1011.0124
1293.71869 1000.45615 1296.89369 1001.0499 curveto 1301.10619 1002.5874
1304.54994 1009.4249 1305.72495 1011.75615 curveto 1310.99368 1022.19365
1310.11868 1031.7999 1305.01244 1042.74365 curveto 1303.55618 1045.8624
1300.37494 1049.13115 1298.92494 1051.4624 curveto 1297.78119 1053.30615
1295.51869 1054.75615 1294.89369 1056.16864 curveto closepath 1374.31868
1170.08115 moveto 1367.07494 1173.66238 1359.83119 1173.34364 1352.36868
1169.86864 curveto 1348.86244 1166.84364 1345.34993 1163.81865 1341.83743
1160.7874 curveto 1333.36868 1153.8749 1323.53119 1144.30614 1314.81244
1139.4874 curveto 1311.81244 1137.83115 1309.49368 1135.08739 1306.37494
1134.33115 curveto 1301.96869 1133.26865 1298.26244 1131.69365 1293.33743
1134.50615 curveto 1290.63744 1136.0499 1289.09369 1138.59364 1287.1312
1140.8624 curveto 1280.58743 1147.59364 lineto 1275.41245 1157.4749
1268.61868 1160.80614 1259.3187 1158.6124 curveto 1257.79994 1158.25615
1251.0687 1155.4874 1249.8062 1153.39365 curveto 1245.5687 1146.32489
1250.8812 1136.45615 1255.11868 1129.05614 curveto 1257.64993 1124.64365
1263.28745 1118.68114 1259.98119 1114.70615 curveto 1256.86244 1110.96239
1251.1937 1112.82489 1248.0562 1113.39989 curveto 1240.15619 1114.8624
1232.15619 1116.02489 1225.82494 1107.51239 curveto 1223.77495 1104.7499
1220.68744 1102.49364 1221.03119 1099.33115 curveto 1221.4437 1095.59364
1236.54369 1086.44365 1239.26244 1084.43115 curveto 1253.99994 1073.5499
1276.14369 1071.13115 1292.18744 1078.11865 curveto 1297.24994 1080.32489
1302.04369 1083.83115 1306.71869 1086.5249 curveto 1309.86244 1088.3499
1312.59369 1093.05615 1316.19994 1093.53114 curveto 1317.41869 1093.6874
1321.81868 1092.32489 1322.99994 1092.00615 curveto 1333.63744 1089.13115
1343.29369 1080.5249 1353.56244 1074.7124 curveto 1358.08119 1072.15614
1361.42494 1067.4999 1366.18744 1066.25615 curveto 1369.71243 1065.3374
1375.47493 1066.4749 1378.74994 1070.8499 curveto 1378.32494 1072.94989
1378.36868 1075.50615 1377.54369 1077.66864 curveto 1375.11868 1084.03114
1366.17494 1096.69365 1359.30618 1099.5624 curveto 1353.43744 1102.01865
1347.61868 1101.70615 1341.82494 1103.39989 curveto 1340.08743 1103.90614
1337.08743 1104.0624 1336.18744 1106.88115 curveto 1339.86244 1109.93114
1344.93118 1116.6874 1348.64369 1118.83115 curveto 1350.74368 1120.04364
1372.73119 1133.69365 1374.84369 1137.80614 curveto 1375.45619 1139.60614
1374.58743 1142.31865 1375.04994 1144.3124 curveto 1377.05618 1152.91864
1382.69368 1160.98114 1374.31868 1170.08115 curveto closepath gsave
1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 453.87497 838.2749
moveto 494.83748 838.2749 lineto 494.83748 751.98741 lineto 494.83748
720.27492 470.09998 709.52492 425.78748 709.52492 curveto 380.29373
709.52492 355.84998 719.58742 355.84998 751.27492 curveto 355.84998
838.2749 lineto 396.81248 838.2749 lineto 396.81248 758.7624 lineto
396.81248 739.52492 409.34998 736.68741 422.67497 736.05617 curveto
437.76872 735.33742 453.87497 739.28741 453.87497 758.7624 curveto
453.87497 838.2749 lineto closepath gsave 0 0.36078 0.63529  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 878.04996 798.93741
moveto 845.6062 798.93741 lineto 826.9562 831.80615 780.2187 802.85616
811.93121 792.48116 curveto 816.24371 791.06866 823.0937 790.62491
829.77496 789.0749 curveto 864.4187 781.06866 881.75621 767.46866 881.75621
748.23741 curveto 880.77496 719.59991 859.48746 704.18741 817.89996
704.5749 curveto 770.06247 705.02492 760.75621 725.16866 756.32497
751.94366 curveto 794.98122 751.94366 lineto 796.4687 747.25616 803.93745
738.43117 807.51247 736.24991 curveto 810.88121 734.18741 815.17496
733.45616 820.14996 733.45616 curveto 833.00621 733.45616 839.43745
736.48741 839.43745 742.58742 curveto 839.43745 747.75616 830.79372
752.23741 813.46246 755.99367 curveto 778.30621 763.95616 760.76247
778.04991 760.76247 798.24365 curveto 761.74371 825.01866 781.28746
838.84366 819.38747 839.80615 curveto 854.03746 839.3249 873.5812 825.7124
878.04996 798.93741 curveto closepath gsave 0 0.36078 0.63529  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 898.13121 805.11865
moveto 898.13121 838.2749 lineto 1034.1937 838.2749 lineto 1034.1937
805.11865 lineto 984.31245 805.11865 lineto 984.31245 701.61241 lineto
948.0187 701.61241 lineto 948.0187 805.11865 lineto 898.13121 805.11865
lineto closepath gsave 0 0.36078 0.63529  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 1113.89369
837.99365 moveto 1146.0062 837.99365 1173.40619 817.62491 1183.28119
789.43741 curveto 1143.73744 789.43741 lineto 1136.74994 798.04366
1125.96245 803.5749 1113.89369 803.5749 curveto 1092.9062 803.5749
1075.78745 786.84991 1075.78745 766.3374 curveto 1075.78745 745.81866
1092.9062 729.09366 1113.89369 729.09366 curveto 1126.8187 729.09366
1138.28119 735.44366 1145.17494 745.11867 curveto 1183.91245 745.11867
lineto 1174.62494 715.95616 1146.71869 694.67491 1113.89369 694.67491
curveto 1073.51245 694.67491 1040.5812 726.86867 1040.5812 766.3374
curveto 1040.5812 805.79991 1073.51245 837.99365 1113.89369 837.99365
curveto closepath gsave 0 0.36078 0.63529  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 824.88121 182.89369
moveto 795.18745 139.43744 lineto 795.18745 139.43744 810.76247 147.40619
821.62495 143.06244 curveto 832.48746 138.71243 839.00621 128.21243
835.38747 120.24994 curveto 831.76247 112.28119 821.26247 105.03745
810.39996 108.29369 curveto 799.53746 111.55618 795.54996 116.62494
799.53746 117.34995 curveto 803.5187 118.07494 802.79372 115.17494
806.05621 113.0062 curveto 809.31245 110.83119 816.19371 123.14369
812.57497 126.76244 curveto 808.94997 130.38744 800.26247 139.43744
790.11871 131.83743 curveto 779.98122 124.23119 784.29372 109.74368
786.13747 102.49994 curveto 787.98122 95.26244 815.08746 78.96243 836.83746
94.89993 curveto 858.5812 110.83119 857.83746 123.14369 855.66246 133.28119
curveto 853.49371 143.42494 841.9062 154.28743 835.02496 153.56244
curveto 828.1437 152.83743 825.24371 156.46243 825.24371 156.46243
curveto 832.84996 167.68744 lineto 860.37495 166.59993 lineto 858.19995
154.64993 lineto 870.14996 152.11244 lineto 870.14996 152.11244 873.7687
165.87494 880.64996 169.49368 curveto 887.5312 173.11868 891.87495
181.80618 891.87495 181.80618 curveto 891.87495 181.80618 824.16246
182.53119 824.88121 182.89369 curveto closepath gsave 1 1 1  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 721.04996 151.49994
moveto 720.14996 150.56868 719.12497 149.63118 717.98122 148.91869
curveto 714.3312 146.63744 710.46246 156.75618 712.96872 164.42494
curveto 715.88121 173.34993 739.98122 180.83743 746.02496 165.10619
curveto 748.86871 157.71869 748.0812 151.88118 746.02496 148.69368
curveto 743.97496 145.49994 743.96872 146.86868 739.18121 152.11868
curveto 732.72496 159.18744 725.78746 156.44368 721.04996 151.49994
curveto closepath 726.41872 130.44994 moveto 726.56871 130.44994 724.16872
127.01244 720.63747 123.03745 curveto 715.38121 117.11244 685.92497
98.5062 679.91246 105.34995 curveto 678.88747 106.51869 680.36247 111.41245
679.44997 113.34995 curveto 674.76247 123.29994 659.18747 115.53119
662.57497 105.36868 curveto 669.78746 83.73744 711.2687 93.09369 725.13747
101.84995 curveto 749.60622 117.30618 773.72496 146.39993 760.16246
172.86244 curveto 756.30621 180.39369 738.34996 196.88118 712.73746
184.49368 curveto 698.28746 177.50618 686.26247 144.69368 708.86871
133.41869 curveto 715.25621 128.86868 726.41872 130.44994 726.41872
130.44994 curveto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 585.52496 92.08743
moveto 613.17497 92.3812 lineto 677.21246 186.39993 lineto 677.21246
186.39993 675.17497 190.18744 667.60622 189.01869 curveto 660.04372
187.85619 652.76247 183.78119 645.19371 184.36244 curveto 637.62497
184.94368 633.54997 186.11244 631.80621 187.56868 curveto 630.06247
189.01869 628.31247 185.81868 630.06247 180.58119 curveto 631.80621
175.33743 634.71872 171.55618 637.91872 170.97493 curveto 641.11871
170.39369 641.69997 169.51869 641.69997 169.51869 curveto 585.52496
92.08743 lineto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 936.6187 127.22495
moveto 937.5187 128.16245 938.5437 129.09369 939.68745 129.80618 curveto
943.3312 132.08743 947.2062 121.96869 944.69995 114.29994 curveto 941.78746
105.3812 916.88121 97.08743 910.83745 112.8187 curveto 907.99995 120.20619
908.78746 126.03745 910.83745 129.23119 curveto 912.88745 132.42494
912.8937 131.04994 917.6812 125.80618 curveto 924.13745 118.73744 931.88121
122.28119 936.6187 127.22495 curveto closepath 927.2312 146.39993 moveto
927.0812 146.39993 929.4812 149.84369 933.01245 153.81868 curveto 938.2687
159.74368 967.7312 178.34993 973.7437 171.49994 curveto 974.25621 170.91869
977.69995 165.08743 970.8937 165.33119 curveto 966.7187 165.47493 964.5937
158.33743 964.93745 157.32494 curveto 969.81245 142.93118 993.02495
149.12494 989.17496 169.82494 curveto 985.01245 192.23744 950.69995
185.89993 932.7937 175.47493 curveto 907.7812 160.91869 879.92496 130.45619
893.48746 103.99368 curveto 897.34996 96.46243 914.4562 81.89369 940.9187
92.36244 curveto 958.57495 99.34369 970.33745 132.96243 947.7312 144.23744
curveto 941.3437 148.78743 927.2312 146.39993 927.2312 146.39993 curveto
closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 700.74997 873.3374
moveto 822.0937 987.2374 933.51245 1057.4999 1014.31245 1068.84364
curveto 1099.33119 1080.7874 1114.66245 1024.91866 1089.6687 938.08115
curveto 1084.08745 918.6749 1075.3687 897.84366 1064.14995 876.14366
curveto 1101.34995 876.14366 lineto 1110.3187 898.6499 1116.8187 920.60616
1120.5437 941.7124 curveto 1136.7437 1033.5499 1102.57495 1092.6124
1004.84995 1089.30615 curveto 912.98746 1086.19365 797.1437 1022.95615
671.72496 905.14365 curveto 667.46246 901.1374 663.27496 897.09366
659.14996 893.0249 curveto 674.33746 889.0999 688.40622 882.3374 700.74997
873.3374 curveto closepath 524.80623 707.86867 moveto 500.55623 658.19366
485.98123 610.69992 481.45622 570.59991 curveto 471.89998 485.80617
508.23122 440.41867 596.59998 447.43742 curveto 679.64996 454.03117
796.17496 508.84367 907.36871 612.99992 curveto 930.6062 634.76866
952.49995 657.13742 972.7812 679.80617 curveto 917.19995 679.80617
lineto 814.4062 572.23117 689.72496 480.94992 606.47498 467.88118 curveto
475.47498 447.30617 483.44998 539.16867 516.54372 616.21867 curveto
525.91872 638.04367 536.23747 659.57492 547.98747 681.03116 curveto
539.03748 688.80617 531.21872 697.84366 524.80623 707.86867 curveto
closepath gsave 0 0.36078 0.63529  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 837.3437 542.04993
moveto 897.07495 499.37492 958.43745 470.07492 1005.2937 461.19992
curveto 1112.6062 435.44368 1107.78745 541.39992 1079.88745 616.21867
curveto 1071.7937 637.93741 1062.18745 658.98741 1050.92494 679.80617
curveto 1086.0062 679.80617 lineto 1101.33745 640.54991 1110.59995
603.28117 1114.20619 570.59991 curveto 1123.5562 485.80617 1079.11244
433.73743 992.6812 440.75618 curveto 939.38121 445.08118 872.18745
471.26868 802.36246 519.04993 curveto 813.9687 526.36867 825.63747
534.03117 837.3437 542.04993 curveto closepath gsave 0.91764 0.46666
0.11764  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 897.0187 876.14366
moveto 867.7312 906.0874 838.56871 933.20615 810.04996 957.0374 curveto
821.39996 965.8624 832.6437 974.33115 843.74995 982.4374 curveto 873.6062
959.03116 904.2062 932.2749 935.2312 902.4749 curveto 944.2312 893.8374
952.86246 885.04991 961.1437 876.14366 curveto 897.0187 876.14366 lineto
closepath gsave 0.91764 0.46666 0.11764  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 674.54372 673.56866
moveto 674.61871 673.60617 lineto 674.54372 673.56866 lineto closepath
gsave 0 0.36078 0.63529  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 681.73747 677.49367
moveto 714.87497 645.44366 749.94997 614.07492 784.11871 584.18117
curveto 786.5937 582.01242 789.0812 579.86867 791.5812 577.74992 curveto
780.13121 569.07492 768.71872 560.69366 757.35622 552.63116 curveto
735.50621 570.31242 713.63747 590.06866 692.08122 611.88742 curveto
675.13121 629.04367 659.02496 646.31241 643.82497 663.63116 curveto
643.83746 663.63116 643.84996 663.63116 643.86247 663.63742 curveto
638.06247 662.67491 632.11871 662.17491 626.05621 662.17491 curveto
565.87497 662.17491 516.79372 711.25616 516.79372 771.43115 curveto
516.79372 790.9624 521.96872 809.3249 531.00623 825.21866 curveto 511.44997
863.2624 496.54997 898.8249 489.15622 941.7124 curveto 473.30623 1033.5499
511.17497 1097.0624 606.75623 1093.75615 curveto 662.03122 1091.84364
727.19371 1064.46864 797.72496 1016.25615 curveto 786.86246 1008.65614
775.91246 1000.71864 764.86871 992.40614 curveto 700.28122 1039.4374
640.76247 1067.03114 593.04997 1068.84364 curveto 536.59372 1070.9999
498.19373 1008.29366 514.00623 919.39365 curveto 518.41248 894.62491
528.79372 869.0249 543.61873 843.00615 curveto 543.61873 843.0124 lineto
550.92497 830.0874 558.58122 818.23116 566.54372 807.28116 curveto
549.08748 774.50616 556.81247 731.59366 587.93747 708.10616 curveto
613.68747 688.66866 650.11871 695.39366 679.89996 726.5749 curveto
658.89996 742.23741 lineto 624.14372 709.44366 584.00623 726.24991
585.47498 769.16241 curveto 692.38121 769.16241 lineto 692.43747 769.91866
692.48747 770.67491 692.51872 771.43115 curveto 694.37497 812.6499
674.01872 846.2749 632.79997 846.2749 curveto 611.86871 846.2749 591.89996
838.19365 578.27496 823.66866 curveto 575.45622 820.66866 572.93121
817.48741 570.69373 814.17491 curveto 550.01247 849.75615 lineto 569.70622
868.88115 596.54372 880.69365 626.05621 880.69365 curveto 686.23122
880.69365 735.31247 831.61241 735.31247 771.43115 curveto 735.31247
731.56866 713.7687 696.5749 681.73747 677.49367 curveto closepath gsave
0.91764 0.46666 0.11764  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 633.00623 824.0749
moveto 650.59372 824.0749 664.86871 809.15616 665.73122 790.86865 curveto
665.69371 790.63116 665.65622 790.3874 665.61247 790.1499 curveto 590.21872
790.1499 lineto 590.24371 790.3874 590.27496 790.63116 590.31247 790.86865
curveto 593.05621 809.15616 612.23747 824.0749 633.00623 824.0749 curveto
closepath gsave 0.91764 0.46666 0.11764  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 1752.48232
439.91452 moveto 1769.81111 439.91452 lineto 1769.81111 358.97337 lineto
1769.81108 349.92677 1770.20314 343.25336 1770.98727 338.9531 curveto
1771.77136 334.65277 1773.56174 331.2444 1776.35843 328.72795 curveto
1779.15504 326.21146 1782.93182 324.95323 1787.6888 324.95325 curveto
1792.1843 324.95323 1795.68665 325.98848 1798.19585 328.059 curveto
1800.70494 330.1295 1802.48225 333.06007 1803.52779 336.85072 curveto
1804.57321 340.64133 1805.09595 348.14296 1805.09601 359.35562 curveto
1805.09601 439.91452 lineto 1821.01341 439.91452 lineto 1821.01341
360.4068 lineto 1821.01334 347.66515 1820.26843 337.85411 1818.7787
330.97366 curveto 1817.28883 324.09317 1813.83875 318.3913 1808.42847
313.86803 curveto 1803.01807 309.34476 1795.76506 307.08311 1786.66945
307.08311 curveto 1779.61244 307.08311 1773.48332 308.50063 1768.2821
311.33563 curveto 1763.08083 314.17064 1759.14722 318.75761 1756.48126
325.09659 curveto 1753.81529 331.43552 1752.4823 342.72777 1752.48232
358.97337 curveto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 1847.5688 405.98996
moveto 1862.7021 405.98996 lineto 1862.7021 391.08226 lineto 1866.36124
402.54962 1872.89548 408.28336 1882.30481 408.28345 curveto 1887.6367
408.28336 1891.93623 406.7225 1895.2034 403.6009 curveto 1898.47046
400.47911 1900.53528 396.73627 1901.39786 392.37234 curveto 1902.26031
388.00827 1902.69157 381.11186 1902.69165 371.68314 curveto 1902.69165
309.47217 lineto 1886.38219 309.47217 lineto 1886.38219 370.63196 lineto
1886.38213 379.04135 1885.78098 384.75916 1884.57874 387.78537 curveto
1883.37639 390.81142 1880.81497 392.32448 1876.89447 392.32457 curveto
1872.81706 392.32448 1869.64143 390.39731 1867.36754 386.54306 curveto
1865.0936 382.68864 1863.95665 375.02776 1863.95667 363.56035 curveto
1863.95667 309.47217 lineto 1847.5688 309.47217 lineto closepath gsave
0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 1945.71332
418.9864 moveto 1928.61975 418.9864 lineto 1928.61975 440.10565 lineto
1945.71332 440.10565 lineto closepath 1929.01181 405.98996 moveto 1945.32126
405.98996 lineto 1945.32126 309.47217 lineto 1929.01181 309.47217 lineto
closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 1961.68323
405.98996 moveto 1977.75746 405.98996 lineto 1992.57712 336.70738 lineto
2007.08313 405.98996 lineto 2021.2755 405.98996 lineto 1998.84999 309.47217
lineto 1984.34398 309.47217 lineto closepath gsave 0.17254 0.17254
0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2094.56377
354.76863 moveto 2049.79115 354.76863 lineto 2049.79112 341.70844 2051.24173
332.99637 2054.14296 328.63239 curveto 2057.04413 324.26836 2060.69023
322.08636 2065.08127 322.08638 curveto 2072.39958 322.08636 2077.02582
328.10678 2078.95999 340.14763 curveto 2093.85806 337.75858 lineto
2089.93745 317.30826 2080.16225 307.08311 2064.5324 307.08311 curveto
2054.96625 307.08311 2047.33426 311.256 2041.63641 319.60176 curveto
2035.93855 327.94751 2033.08963 340.17944 2033.08963 356.29764 curveto
2033.08963 372.86168 2035.96469 385.66699 2041.71483 394.71362 curveto
2047.46494 403.76007 2055.1492 408.28336 2064.76762 408.28345 curveto
2071.51093 408.28336 2077.18263 406.02171 2081.78279 401.49854 curveto
2086.38284 396.97517 2089.62381 391.0344 2091.50574 383.6762 curveto
2093.38753 376.31784 2094.40688 366.68199 2094.56377 354.76863 curveto
closepath 2077.86224 368.2429 moveto 2077.8622 385.25288 2073.31436
393.75792 2064.21875 393.758 curveto 2055.69807 393.75792 2051.01956
385.25288 2050.18321 368.2429 curveto closepath gsave 0.17254 0.17254
0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2115.63039
405.98996 moveto 2130.05798 405.98996 lineto 2130.05798 384.39291 lineto
2134.44896 400.12872 2141.03548 407.99666 2149.81752 407.99677 curveto
2150.65385 407.99666 2151.64706 407.90111 2152.79713 407.71007 curveto
2152.79713 386.97308 lineto 2151.43797 387.16414 2150.34023 387.25969
2149.50388 387.25977 curveto 2137.84677 387.25969 2132.01823 377.70349
2132.01825 358.59113 curveto 2132.01825 309.47217 lineto 2115.63039
309.47217 lineto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2214.63744
383.43729 moveto 2201.85646 379.23254 lineto 2199.50409 388.9161 2195.03467
393.75792 2188.4482 393.758 curveto 2185.41628 393.75792 2182.97247
392.61118 2181.11678 390.31776 curveto 2179.26103 388.02419 2178.33318
385.18918 2178.33319 381.81273 curveto 2178.33318 377.99017 2179.27411
375.18701 2181.15599 373.40326 curveto 2183.03783 371.61937 2187.35042
369.38959 2194.09378 366.71391 curveto 2202.40529 363.33733 2208.39064
359.53076 2212.04987 355.29424 curveto 2215.70898 351.0576 2217.53857
345.14868 2217.53864 337.56744 curveto 2217.53857 329.03053 2214.92488
321.8156 2209.69754 315.92262 curveto 2204.47011 310.02962 2197.41313
307.08311 2188.52661 307.08311 curveto 2171.74666 307.08311 2162.23282
316.4482 2159.98505 335.17839 curveto 2173.86377 338.33194 lineto 2175.64107
327.24672 2180.6855 321.70412 2188.99707 321.70413 curveto 2193.23123
321.70412 2196.38072 322.97827 2198.44559 325.52661 curveto 2200.51036
328.07492 2201.54277 331.10106 2201.54282 334.60503 curveto 2201.54277
337.0259 2200.83707 339.43088 2199.42572 341.81996 curveto 2198.01428
344.20898 2194.06761 346.67767 2187.58568 349.22603 curveto 2181.36505
351.6469 2176.67348 353.90854 2173.51093 356.01094 curveto 2170.34834
358.11327 2167.74771 361.15532 2165.70905 365.13713 curveto 2163.67035
369.11884 2162.65102 373.62617 2162.65102 378.65918 curveto 2162.65102
386.87744 2165.10788 393.8694 2170.02164 399.63507 curveto 2174.93538
405.40056 2181.28665 408.28336 2189.07549 408.28345 curveto 2202.30074
408.28336 2210.82138 400.0013 2214.63744 383.43729 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2254.1306 418.9864
moveto 2237.03703 418.9864 lineto 2237.03703 440.10565 lineto 2254.1306
440.10565 lineto closepath 2237.42908 405.98996 moveto 2253.73854 405.98996
lineto 2253.73854 309.47217 lineto 2237.42908 309.47217 lineto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2283.50879
431.1228 moveto 2298.25003 432.84293 lineto 2298.25003 405.98996 lineto
2313.38333 405.98996 lineto 2313.38333 389.93552 lineto 2298.25003
389.93552 lineto 2298.25003 347.31479 lineto 2298.25 339.7972 2298.40683
334.81204 2298.72049 332.35931 curveto 2299.03412 329.90652 2299.97504
327.89972 2301.54329 326.3389 curveto 2303.11148 324.77803 2305.72517
323.9976 2309.38437 323.99762 curveto 2311.31847 323.9976 2313.51398
324.22058 2315.97089 324.66655 curveto 2315.97089 308.80324 lineto
2311.57983 307.6565 2307.50247 307.08311 2303.7388 307.08311 curveto
2297.62271 307.08311 2292.94421 308.53247 2289.70325 311.4312 curveto
2286.46225 314.32991 2284.39743 318.26389 2283.50879 323.23312 curveto
2282.62012 328.20233 2282.1758 335.7836 2282.1758 345.97691 curveto
2282.1758 389.93552 lineto 2271.90398 389.93552 lineto 2271.90398 405.98996
lineto 2282.64627 405.98996 lineto closepath gsave 0.17254 0.17254
0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2322.21783
405.98996 moveto 2338.60571 405.98996 lineto 2352.40602 339.66982 lineto
2366.59839 405.98996 lineto 2381.33963 405.98996 lineto 2355.62086
303.35619 lineto 2353.73898 295.90236 2352.01395 290.39162 2350.44576
286.82394 curveto 2348.8775 283.25632 2346.65587 280.37352 2343.78082
278.17557 curveto 2340.90575 275.97766 2337.1943 274.87871 2332.64648
274.87866 curveto 2329.92824 274.87871 2327.13158 275.32466 2324.25652
276.21654 curveto 2324.25652 292.07985 lineto 2326.34747 291.63391
2328.25546 291.41093 2329.98051 291.41092 curveto 2334.21469 291.41093
2337.22043 292.66917 2338.99776 295.18562 curveto 2340.77505 297.7021
2342.68306 303.54732 2344.72176 312.72128 curveto closepath gsave 0.17254
0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2492.7097 358.68669
moveto 2492.70964 324.28429 2482.25487 307.08311 2461.34535 307.08311
curveto 2451.72693 307.08311 2444.1603 311.24007 2438.6454 319.55399
curveto 2433.1305 327.86787 2430.37305 340.59355 2430.37306 357.73106
curveto 2430.37305 391.43257 2440.82782 408.28336 2461.73741 408.28345
curveto 2471.25122 408.28336 2478.79172 404.17418 2484.35895 395.95593
curveto 2489.92606 387.7375 2492.70964 375.31444 2492.7097 358.68669
curveto closepath 2475.3809 357.73106 moveto 2475.38086 371.30083 2474.13934
380.61813 2471.65639 385.683 curveto 2469.17332 390.74771 2465.81473
393.2801 2461.58058 393.28018 curveto 2452.38036 393.2801 2447.78026
381.4304 2447.78027 357.73106 curveto 2447.78026 345.62648 2448.85187
336.6755 2450.99512 330.8781 curveto 2453.13832 325.08064 2456.66681
322.18193 2461.58058 322.18193 curveto 2466.44202 322.18193 2469.95744
325.12842 2472.12685 331.02144 curveto 2474.29617 336.91441 2475.38086
345.81761 2475.3809 357.73106 curveto closepath gsave 0.17254 0.17254
0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2534.00633
405.98996 moveto 2548.1987 405.98996 lineto 2548.1987 389.93552 lineto
2534.00633 389.93552 lineto 2534.00633 309.47217 lineto 2518.01051
309.47217 lineto 2518.01051 389.93552 lineto 2507.66028 389.93552 lineto
2507.66028 405.98996 lineto 2518.01051 405.98996 lineto 2518.16733
417.4573 2518.97757 425.37303 2520.44125 429.73715 curveto 2521.9049
434.10103 2524.29643 437.52534 2527.61584 440.01009 curveto 2530.93521
442.49457 2535.44383 443.73688 2541.14172 443.73701 curveto 2544.43494
443.73688 2547.64978 443.35463 2550.78627 442.59027 curveto 2550.78627
426.72694 lineto 2548.53844 427.17279 2546.47362 427.39577 2544.5918
427.39587 curveto 2541.35078 427.39577 2538.95926 426.66312 2537.4172
425.19795 curveto 2535.87509 423.73254 2534.9211 421.8691 2534.5552
419.60756 curveto 2534.18927 417.34583 2534.0063 412.80663 2534.00633
405.98996 curveto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2602.4072 439.91452
moveto 2663.7245 439.91452 lineto 2663.7245 422.61777 lineto 2620.12807
422.61777 lineto 2620.12807 385.34853 lineto 2654.3152 385.34853 lineto
2654.3152 367.9562 lineto 2620.12807 367.9562 lineto 2620.12807 327.15117
lineto 2664.4302 327.15117 lineto 2664.4302 309.47217 lineto 2602.4072
309.47217 lineto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2683.22292
439.91452 moveto 2699.6108 439.91452 lineto 2699.6108 309.47217 lineto
2683.22292 309.47217 lineto closepath gsave 0.17254 0.17254 0.16862
 setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2783.95496
354.76863 moveto 2739.18236 354.76863 lineto 2739.18233 341.70844 2740.63293
332.99637 2743.53415 328.63239 curveto 2746.43533 324.26836 2750.08144
322.08636 2754.47247 322.08638 curveto 2761.79077 322.08636 2766.417
328.10678 2768.3512 340.14763 curveto 2783.24927 337.75858 lineto 2779.32866
317.30826 2769.55345 307.08311 2753.9236 307.08311 curveto 2744.35744
307.08311 2736.72546 311.256 2731.02762 319.60176 curveto 2725.32976
327.94751 2722.48083 340.17944 2722.48083 356.29764 curveto 2722.48083
372.86168 2725.3559 385.66699 2731.10603 394.71362 curveto 2736.85614
403.76007 2744.5404 408.28336 2754.15883 408.28345 curveto 2760.90211
408.28336 2766.57384 406.02171 2771.174 401.49854 curveto 2775.77403
396.97517 2779.01501 391.0344 2780.89694 383.6762 curveto 2782.77873
376.31784 2783.79808 366.68199 2783.95496 354.76863 curveto closepath
2767.25345 368.2429 moveto 2767.2534 385.25288 2762.70557 393.75792
2753.60995 393.758 curveto 2745.08928 393.75792 2740.41077 385.25288
2739.5744 368.2429 curveto closepath gsave 0.17254 0.17254 0.16862
 setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2859.90923
373.49883 moveto 2844.14864 371.39645 lineto 2843.36449 379.80585 2842.03151
385.42809 2840.14969 388.26317 curveto 2838.26779 391.0981 2835.60182
392.51561 2832.15178 392.51569 curveto 2827.29027 392.51561 2823.76178
389.79208 2821.56631 384.34512 curveto 2819.37079 378.89801 2818.27303
369.32588 2818.27306 355.6287 curveto 2818.27303 334.22275 2822.89926
323.51979 2832.15178 323.5198 curveto 2839.26099 323.51979 2843.25993
330.49582 2844.14864 344.44792 curveto 2859.90923 342.7278 lineto 2857.76593
318.96468 2848.12141 307.08311 2830.97562 307.08311 curveto 2820.83446
307.08311 2813.32008 311.54268 2808.4325 320.46182 curveto 2803.54488
329.38094 2801.10106 341.70844 2801.10107 357.44438 curveto 2801.10106
374.00842 2803.74089 386.62262 2809.02057 395.28699 curveto 2814.30022
403.9512 2821.98448 408.28336 2832.07336 408.28345 curveto 2848.3305
408.28336 2857.60912 396.68849 2859.90923 373.49883 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2880.89746
431.1228 moveto 2895.6387 432.84293 lineto 2895.6387 405.98996 lineto
2910.772 405.98996 lineto 2910.772 389.93552 lineto 2895.6387 389.93552
lineto 2895.6387 347.31479 lineto 2895.63869 339.7972 2895.7955 334.81204
2896.10918 332.35931 curveto 2896.42279 329.90652 2897.36372 327.89972
2898.93196 326.3389 curveto 2900.50015 324.77803 2903.11385 323.9976
2906.77306 323.99762 curveto 2908.70715 323.9976 2910.90265 324.22058
2913.35957 324.66655 curveto 2913.35957 308.80324 lineto 2908.96852
307.6565 2904.89116 307.08311 2901.12747 307.08311 curveto 2895.0114
307.08311 2890.33289 308.53247 2887.09192 311.4312 curveto 2883.85092
314.32991 2881.7861 318.26389 2880.89746 323.23312 curveto 2880.00879
328.20233 2879.56447 335.7836 2879.56448 345.97691 curveto 2879.56448
389.93552 lineto 2869.29265 389.93552 lineto 2869.29265 405.98996 lineto
2880.03494 405.98996 lineto closepath gsave 0.17254 0.17254 0.16862
 setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 2929.32947
405.98996 moveto 2943.75706 405.98996 lineto 2943.75706 384.39291 lineto
2948.14804 400.12872 2954.73456 407.99666 2963.5166 407.99677 curveto
2964.35294 407.99666 2965.34615 407.90111 2966.49622 407.71007 curveto
2966.49622 386.97308 lineto 2965.13705 387.16414 2964.0393 387.25969
2963.20296 387.25977 curveto 2951.54585 387.25969 2945.71732 377.70349
2945.71733 358.59113 curveto 2945.71733 309.47217 lineto 2929.32947
309.47217 lineto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3039.07884
358.68669 moveto 3039.07877 324.28429 3028.624 307.08311 3007.71448
307.08311 curveto 2998.09605 307.08311 2990.52942 311.24007 2985.01454
319.55399 curveto 2979.49963 327.86787 2976.74219 340.59355 2976.74219
357.73106 curveto 2976.74219 391.43257 2987.19696 408.28336 3008.10654
408.28345 curveto 3017.62035 408.28336 3025.16084 404.17418 3030.72807
395.95593 curveto 3036.29518 387.7375 3039.07877 375.31444 3039.07884
358.68669 curveto closepath 3021.75003 357.73106 moveto 3021.74998
371.30083 3020.50848 380.61813 3018.02551 385.683 curveto 3015.54247
390.74771 3012.18387 393.2801 3007.94972 393.28018 curveto 2998.74948
393.2801 2994.14938 381.4304 2994.1494 357.73106 curveto 2994.14938
345.62648 2995.221 336.6755 2997.36424 330.8781 curveto 2999.50745
325.08064 3003.03593 322.18193 3007.94972 322.18193 curveto 3012.81116
322.18193 3016.32657 325.12842 3018.49599 331.02144 curveto 3020.6653
336.91441 3021.74998 345.81761 3021.75003 357.73106 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3062.10573
405.98996 moveto 3077.23903 405.98996 lineto 3077.23903 391.08226 lineto
3080.89818 402.54962 3087.4324 408.28336 3096.84175 408.28345 curveto
3102.17365 408.28336 3106.47316 406.7225 3109.74034 403.6009 curveto
3113.0074 400.47911 3115.07222 396.73627 3115.9348 392.37234 curveto
3116.79726 388.00827 3117.22852 381.11186 3117.22858 371.68314 curveto
3117.22858 309.47217 lineto 3100.91911 309.47217 lineto 3100.91911
370.63196 lineto 3100.91907 379.04135 3100.31792 384.75916 3099.11566
387.78537 curveto 3097.91331 390.81142 3095.3519 392.32448 3091.4314
392.32457 curveto 3087.354 392.32448 3084.17836 390.39731 3081.90448
386.54306 curveto 3079.63054 382.68864 3078.49358 375.02776 3078.4936
363.56035 curveto 3078.4936 309.47217 lineto 3062.10573 309.47217 lineto
closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3160.25024
418.9864 moveto 3143.15668 418.9864 lineto 3143.15668 440.10565 lineto
3160.25024 440.10565 lineto closepath 3143.54872 405.98996 moveto 3159.85818
405.98996 lineto 3159.85818 309.47217 lineto 3143.54872 309.47217 lineto
closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3242.15959
373.49883 moveto 3226.399 371.39645 lineto 3225.61485 379.80585 3224.28186
385.42809 3222.40005 388.26317 curveto 3220.51814 391.0981 3217.85219
392.51561 3214.40215 392.51569 curveto 3209.54063 392.51561 3206.01215
389.79208 3203.81668 384.34512 curveto 3201.62114 378.89801 3200.52339
369.32588 3200.52342 355.6287 curveto 3200.52339 334.22275 3205.14963
323.51979 3214.40215 323.5198 curveto 3221.51135 323.51979 3225.5103
330.49582 3226.399 344.44792 curveto 3242.15959 342.7278 lineto 3240.0163
318.96468 3230.37178 307.08311 3213.22598 307.08311 curveto 3203.08481
307.08311 3195.57045 311.54268 3190.68285 320.46182 curveto 3185.79523
329.38094 3183.35143 341.70844 3183.35144 357.44438 curveto 3183.35143
374.00842 3185.99126 386.62262 3191.27094 395.28699 curveto 3196.55058
403.9512 3204.23483 408.28336 3214.32373 408.28345 curveto 3230.58087
408.28336 3239.85948 396.68849 3242.15959 373.49883 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3362.15483
410.76807 moveto 3347.02153 404.3654 lineto 3345.24416 411.24577 3342.9049
416.32649 3340.00375 419.60756 curveto 3337.10251 422.88841 3333.14276
424.5289 3328.12451 424.52902 curveto 3323.47209 424.5289 3319.87827
422.85657 3317.34302 419.51201 curveto 3314.80771 416.16722 3313.54005
412.32881 3313.54008 407.99677 curveto 3313.54005 403.21855 3314.96452
399.412 3317.81348 396.57709 curveto 3320.66237 393.74199 3326.34715
390.34953 3334.86784 386.39972 curveto 3342.13387 383.0231 3347.72717
379.80585 3351.64777 376.74794 curveto 3355.56825 373.68988 3358.74388
369.59663 3361.1747 364.4682 curveto 3363.60536 359.33965 3364.82072
353.39886 3364.8208 346.64586 curveto 3364.82072 335.68803 3361.64508
326.3548 3355.29388 318.64613 curveto 3348.94254 310.93745 3340.04291
307.08311 3328.59497 307.08311 curveto 3308.83542 307.08311 3296.60333
319.25136 3291.89868 343.58786 curveto 3307.73769 349.03491 lineto
3310.50818 332.98044 3317.72197 324.95323 3329.37909 324.95325 curveto
3335.07689 324.95323 3339.40256 326.75298 3342.35608 330.35251 curveto
3345.30951 333.95198 3346.78624 338.39563 3346.7863 343.68343 curveto
3346.78624 347.56958 3345.76689 351.16908 3343.72827 354.48195 curveto
3341.68954 357.79472 3336.61897 361.33052 3328.51657 365.08936 curveto
3319.9436 369.0392 3313.76222 372.38387 3309.9724 375.12338 curveto
3306.18251 377.86276 3302.9546 381.90822 3300.28865 387.25977 curveto
3297.62267 392.61118 3296.28969 398.69528 3296.28969 405.51215 curveto
3296.28969 415.89645 3299.25623 424.62447 3305.18933 431.69618 curveto
3311.12239 438.76765 3319.00269 442.30345 3328.8302 442.30357 curveto
3346.23737 442.30345 3357.34557 431.79161 3362.15483 410.76807 curveto
closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3442.26485
373.49883 moveto 3426.50426 371.39645 lineto 3425.72011 379.80585 3424.38712
385.42809 3422.50531 388.26317 curveto 3420.6234 391.0981 3417.95743
392.51561 3414.5074 392.51569 curveto 3409.64589 392.51561 3406.1174
389.79208 3403.92192 384.34512 curveto 3401.7264 378.89801 3400.62865
369.32588 3400.62868 355.6287 curveto 3400.62865 334.22275 3405.25488
323.51979 3414.5074 323.5198 curveto 3421.61661 323.51979 3425.61555
330.49582 3426.50426 344.44792 curveto 3442.26485 342.7278 lineto 3440.12155
318.96468 3430.47702 307.08311 3413.33124 307.08311 curveto 3403.19006
307.08311 3395.6757 311.54268 3390.7881 320.46182 curveto 3385.90048
329.38094 3383.45668 341.70844 3383.4567 357.44438 curveto 3383.45668
374.00842 3386.09651 386.62262 3391.37619 395.28699 curveto 3396.65584
403.9512 3404.34009 408.28336 3414.42899 408.28345 curveto 3430.68613
408.28336 3439.96474 396.68849 3442.26485 373.49883 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3477.05325
418.9864 moveto 3459.95969 418.9864 lineto 3459.95969 440.10565 lineto
3477.05325 440.10565 lineto closepath 3460.35175 405.98996 moveto 3476.66121
405.98996 lineto 3476.66121 309.47217 lineto 3460.35175 309.47217 lineto
closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3561.08386
354.76863 moveto 3516.31125 354.76863 lineto 3516.31122 341.70844 3517.76183
332.99637 3520.66306 328.63239 curveto 3523.56422 324.26836 3527.21033
322.08636 3531.60136 322.08638 curveto 3538.91968 322.08636 3543.54591
328.10678 3545.48009 340.14763 curveto 3560.37816 337.75858 lineto
3556.45755 317.30826 3546.68234 307.08311 3531.05249 307.08311 curveto
3521.48634 307.08311 3513.85435 311.256 3508.15652 319.60176 curveto
3502.45865 327.94751 3499.60973 340.17944 3499.60973 356.29764 curveto
3499.60973 372.86168 3502.48479 385.66699 3508.23492 394.71362 curveto
3513.98505 403.76007 3521.6693 408.28336 3531.28772 408.28345 curveto
3538.03102 408.28336 3543.70273 406.02171 3548.30289 401.49854 curveto
3552.90294 396.97517 3556.1439 391.0344 3558.02583 383.6762 curveto
3559.90762 376.31784 3560.92697 366.68199 3561.08386 354.76863 curveto
closepath 3544.38234 368.2429 moveto 3544.3823 385.25288 3539.83447
393.75792 3530.73885 393.758 curveto 3522.21817 393.75792 3517.53966
385.25288 3516.70331 368.2429 curveto closepath gsave 0.17254 0.17254
0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3582.15044
405.98996 moveto 3597.28374 405.98996 lineto 3597.28374 391.08226 lineto
3600.94289 402.54962 3607.47713 408.28336 3616.88646 408.28345 curveto
3622.21835 408.28336 3626.51788 406.7225 3629.78505 403.6009 curveto
3633.05211 400.47911 3635.11693 396.73627 3635.9795 392.37234 curveto
3636.84196 388.00827 3637.27322 381.11186 3637.27328 371.68314 curveto
3637.27328 309.47217 lineto 3620.96382 309.47217 lineto 3620.96382
370.63196 lineto 3620.96378 379.04135 3620.36263 384.75916 3619.16037
387.78537 curveto 3617.95804 390.81142 3615.3966 392.32448 3611.4761
392.32457 curveto 3607.39871 392.32448 3604.22307 390.39731 3601.94919
386.54306 curveto 3599.67525 382.68864 3598.53828 375.02776 3598.53831
363.56035 curveto 3598.53831 309.47217 lineto 3582.15044 309.47217
lineto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3718.48105
373.49883 moveto 3702.72047 371.39645 lineto 3701.93631 379.80585 3700.60333
385.42809 3698.72151 388.26317 curveto 3696.83961 391.0981 3694.17365
392.51561 3690.7236 392.51569 curveto 3685.86209 392.51561 3682.33362
389.79208 3680.13814 384.34512 curveto 3677.94261 378.89801 3676.84485
369.32588 3676.84488 355.6287 curveto 3676.84485 334.22275 3681.4711
323.51979 3690.7236 323.5198 curveto 3697.83281 323.51979 3701.83176
330.49582 3702.72047 344.44792 curveto 3718.48105 342.7278 lineto 3716.33777
318.96468 3706.69324 307.08311 3689.54744 307.08311 curveto 3679.40628
307.08311 3671.8919 311.54268 3667.00432 320.46182 curveto 3662.1167
329.38094 3659.6729 341.70844 3659.6729 357.44438 curveto 3659.6729
374.00842 3662.31273 386.62262 3667.59239 395.28699 curveto 3672.87204
403.9512 3680.5563 408.28336 3690.64519 408.28345 curveto 3706.90233
408.28336 3716.18094 396.68849 3718.48105 373.49883 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3794.12167
354.76863 moveto 3749.34906 354.76863 lineto 3749.34903 341.70844 3750.79964
332.99637 3753.70087 328.63239 curveto 3756.60204 324.26836 3760.24814
322.08636 3764.63918 322.08638 curveto 3771.95749 322.08636 3776.58372
328.10678 3778.5179 340.14763 curveto 3793.41597 337.75858 lineto 3789.49536
317.30826 3779.72015 307.08311 3764.0903 307.08311 curveto 3754.52415
307.08311 3746.89217 311.256 3741.19432 319.60176 curveto 3735.49646
327.94751 3732.64754 340.17944 3732.64754 356.29764 curveto 3732.64754
372.86168 3735.5226 385.66699 3741.27274 394.71362 curveto 3747.02284
403.76007 3754.7071 408.28336 3764.32553 408.28345 curveto 3771.06883
408.28336 3776.74054 406.02171 3781.3407 401.49854 curveto 3785.94075
396.97517 3789.18172 391.0344 3791.06364 383.6762 curveto 3792.94543
376.31784 3793.96478 366.68199 3794.12167 354.76863 curveto closepath
3777.42015 368.2429 moveto 3777.4201 385.25288 3772.87227 393.75792
3763.77666 393.758 curveto 3755.25598 393.75792 3750.57747 385.25288
3749.74112 368.2429 curveto closepath gsave 0.17254 0.17254 0.16862
 setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3867.3841 378.65918
moveto 3851.62352 381.04823 lineto 3852.66898 389.64874 3855.92303
396.33809 3861.38567 401.11629 curveto 3866.84827 405.8943 3873.5524
408.28336 3881.49806 408.28345 curveto 3888.60727 408.28336 3894.29205
406.5473 3898.55243 403.0753 curveto 3902.81268 399.60313 3905.49173
395.47803 3906.58954 390.70001 curveto 3907.68723 385.92183 3908.2361
378.69096 3908.23616 369.0074 curveto 3908.23616 336.13402 lineto 3908.2361
322.819 3908.70657 313.93173 3909.64757 309.47217 curveto 3894.20062
309.47217 lineto 3893.52101 312.97612 3893.18123 318.32759 3893.18127
325.52661 curveto 3888.21521 313.23094 3880.79233 307.08311 3870.91258
307.08311 curveto 3864.22151 307.08311 3858.85037 309.58366 3854.79915
314.58475 curveto 3850.74792 319.58582 3848.7223 326.38666 3848.7223
334.98727 curveto 3848.7223 345.49907 3851.68884 353.81297 3857.62195
359.92899 curveto 3863.55501 366.04492 3873.8399 369.1029 3888.47662
369.10297 curveto 3889.20842 369.1029 3890.35844 369.07104 3891.92671
369.0074 curveto 3891.92671 372.92545 lineto 3891.92665 379.80585 3891.07721
384.99806 3889.37836 388.50208 curveto 3887.6794 392.00594 3884.63445
393.75792 3880.24348 393.758 curveto 3873.08192 393.75792 3868.79547
388.72498 3867.3841 378.65918 curveto closepath 3891.92671 356.48875
moveto 3889.83571 356.74355 3888.24135 356.87096 3887.14365 356.871
curveto 3872.92511 356.87096 3865.81586 350.08604 3865.81589 336.51627
curveto 3865.81586 326.6415 3869.34435 321.70412 3876.40135 321.70413
curveto 3880.53096 321.70412 3884.15092 324.37985 3887.26126 329.73135
curveto 3890.3715 335.08281 3891.92665 342.44109 3891.92671 351.80621
curveto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 3934.16426
405.98996 moveto 3949.29756 405.98996 lineto 3949.29756 391.08226 lineto
3952.95671 402.54962 3959.49094 408.28336 3968.90028 408.28345 curveto
3974.23218 408.28336 3978.5317 406.7225 3981.79887 403.6009 curveto
3985.06593 400.47911 3987.13075 396.73627 3987.99333 392.37234 curveto
3988.85579 388.00827 3989.28705 381.11186 3989.28711 371.68314 curveto
3989.28711 309.47217 lineto 3972.97765 309.47217 lineto 3972.97765
370.63196 lineto 3972.9776 379.04135 3972.37645 384.75916 3971.1742
387.78537 curveto 3969.97185 390.81142 3967.41043 392.32448 3963.48993
392.32457 curveto 3959.41254 392.32448 3956.2369 390.39731 3953.96301
386.54306 curveto 3951.68907 382.68864 3950.55211 375.02776 3950.55214
363.56035 curveto 3950.55214 309.47217 lineto 3934.16426 309.47217
lineto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4056.85138
439.91452 moveto 4073.08243 439.91452 lineto 4073.08243 309.47217 lineto
4058.10596 309.47217 lineto 4058.10596 324.09319 lineto 4054.28992
313.1991 4047.72954 307.75206 4038.42482 307.75204 curveto 4029.48596
307.75206 4022.78185 312.30717 4018.31244 321.41743 curveto 4013.843
330.52768 4011.6083 342.47293 4011.6083 357.25325 curveto 4011.6083
373.1165 4014.07825 385.47588 4019.01814 394.33138 curveto 4023.95801
403.1867 4030.53145 407.61441 4038.73846 407.61452 curveto 4047.36363
407.61441 4053.40126 403.34598 4056.85138 394.80919 curveto closepath
4056.85138 366.2361 moveto 4056.85133 376.1745 4055.30925 383.1346
4052.22514 387.11642 curveto 4049.14093 391.0981 4045.95222 393.08897
4042.65901 393.08907 curveto 4033.56332 393.08897 4029.0155 381.74895
4029.01552 359.06894 curveto 4029.0155 334.85983 4033.6156 322.7553
4042.81584 322.75531 curveto 4046.37042 322.7553 4049.59833 324.7621
4052.49957 328.77573 curveto 4055.40073 332.78932 4056.85133 339.76535
4056.85138 349.70384 curveto closepath gsave 0.17254 0.17254 0.16862
 setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4124.93866
439.91452 moveto 4190.25493 439.91452 lineto 4190.25493 421.56659 lineto
4166.3396 421.56659 lineto 4166.3396 309.47217 lineto 4148.61874 309.47217
lineto 4148.61874 421.56659 lineto 4124.93866 421.56659 lineto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4262.28853
354.76863 moveto 4217.51593 354.76863 lineto 4217.5159 341.70844 4218.9665
332.99637 4221.86772 328.63239 curveto 4224.7689 324.26836 4228.41501
322.08636 4232.80605 322.08638 curveto 4240.12434 322.08636 4244.75058
328.10678 4246.68477 340.14763 curveto 4261.58284 337.75858 lineto
4257.66223 317.30826 4247.88701 307.08311 4232.25717 307.08311 curveto
4222.69101 307.08311 4215.05902 311.256 4209.36119 319.60176 curveto
4203.66333 327.94751 4200.8144 340.17944 4200.8144 356.29764 curveto
4200.8144 372.86168 4203.68947 385.66699 4209.4396 394.71362 curveto
4215.18971 403.76007 4222.87398 408.28336 4232.4924 408.28345 curveto
4239.23569 408.28336 4244.90741 406.02171 4249.50755 401.49854 curveto
4254.1076 396.97517 4257.34859 391.0344 4259.23051 383.6762 curveto
4261.1123 376.31784 4262.13164 366.68199 4262.28853 354.76863 curveto
closepath 4245.58702 368.2429 moveto 4245.58696 385.25288 4241.03914
393.75792 4231.94353 393.758 curveto 4223.42285 393.75792 4218.74434
385.25288 4217.90797 368.2429 curveto closepath gsave 0.17254 0.17254
0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4338.24274
373.49883 moveto 4322.48215 371.39645 lineto 4321.69798 379.80585 4320.365
385.42809 4318.48318 388.26317 curveto 4316.60129 391.0981 4313.93532
392.51561 4310.48528 392.51569 curveto 4305.62378 392.51561 4302.09529
389.79208 4299.89981 384.34512 curveto 4297.70428 378.89801 4296.60654
369.32588 4296.60655 355.6287 curveto 4296.60654 334.22275 4301.23277
323.51979 4310.48528 323.5198 curveto 4317.59448 323.51979 4321.59344
330.49582 4322.48215 344.44792 curveto 4338.24274 342.7278 lineto 4336.09944
318.96468 4326.45491 307.08311 4309.30911 307.08311 curveto 4299.16795
307.08311 4291.65358 311.54268 4286.76599 320.46182 curveto 4281.87837
329.38094 4279.43457 341.70844 4279.43457 357.44438 curveto 4279.43457
374.00842 4282.0744 386.62262 4287.35406 395.28699 curveto 4292.63371
403.9512 4300.31798 408.28336 4310.40688 408.28345 curveto 4326.664
408.28336 4335.94261 396.68849 4338.24274 373.49883 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4356.2515 439.91452
moveto 4372.63936 439.91452 lineto 4372.63936 393.18463 lineto 4376.35078
403.25041 4382.64978 408.28336 4391.53639 408.28345 curveto 4396.08417
408.28336 4399.91322 407.00919 4403.02357 404.46097 curveto 4406.13382
401.91255 4408.30318 398.5201 4409.53168 394.28358 curveto 4410.76006
390.04692 4411.37427 382.03563 4411.37434 370.24971 curveto 4411.37434
309.47217 lineto 4395.06488 309.47217 lineto 4395.06488 370.24971 lineto
4395.06482 380.31552 4394.1239 386.51112 4392.24208 388.83655 curveto
4390.36018 391.1618 4388.034 392.32448 4385.26352 392.32457 curveto
4376.84738 392.32448 4372.63934 383.11867 4372.63936 364.7071 curveto
4372.63936 309.47217 lineto 4356.2515 309.47217 lineto closepath gsave
0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4437.77277
405.98996 moveto 4452.90607 405.98996 lineto 4452.90607 391.08226 lineto
4456.5652 402.54962 4463.09944 408.28336 4472.50877 408.28345 curveto
4477.84067 408.28336 4482.1402 406.7225 4485.40736 403.6009 curveto
4488.67442 400.47911 4490.73924 396.73627 4491.60182 392.37234 curveto
4492.46428 388.00827 4492.89554 381.11186 4492.8956 371.68314 curveto
4492.8956 309.47217 lineto 4476.58615 309.47217 lineto 4476.58615 370.63196
lineto 4476.58609 379.04135 4475.98494 384.75916 4474.7827 387.78537
curveto 4473.58035 390.81142 4471.01894 392.32448 4467.09843 392.32457
curveto 4463.02103 392.32448 4459.8454 390.39731 4457.5715 386.54306
curveto 4455.29756 382.68864 4454.16061 375.02776 4454.16063 363.56035
curveto 4454.16063 309.47217 lineto 4437.77277 309.47217 lineto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4577.632 358.68669
moveto 4577.63193 324.28429 4567.17715 307.08311 4546.26765 307.08311
curveto 4536.64922 307.08311 4529.08258 311.24007 4523.5677 319.55399
curveto 4518.0528 327.86787 4515.29535 340.59355 4515.29535 357.73106
curveto 4515.29535 391.43257 4525.75012 408.28336 4546.6597 408.28345
curveto 4556.17351 408.28336 4563.71402 404.17418 4569.28123 395.95593
curveto 4574.84834 387.7375 4577.63193 375.31444 4577.632 358.68669
curveto closepath 4560.30319 357.73106 moveto 4560.30315 371.30083
4559.06165 380.61813 4556.57867 385.683 curveto 4554.09563 390.74771
4550.73703 393.2801 4546.50288 393.28018 curveto 4537.30264 393.2801
4532.70255 381.4304 4532.70256 357.73106 curveto 4532.70255 345.62648
4533.77415 336.6755 4535.91742 330.8781 curveto 4538.06062 325.08064
4541.5891 322.18193 4546.50288 322.18193 curveto 4551.36432 322.18193
4554.87973 325.12842 4557.04915 331.02144 curveto 4559.21846 336.91441
4560.30315 345.81761 4560.30319 357.73106 curveto closepath gsave 0.17254
0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4600.65875
439.91452 moveto 4617.04663 439.91452 lineto 4617.04663 309.47217 lineto
4600.65875 309.47217 lineto closepath gsave 0.17254 0.17254 0.16862
 setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4702.25339
358.68669 moveto 4702.25333 324.28429 4691.79855 307.08311 4670.88904
307.08311 curveto 4661.27061 307.08311 4653.70398 311.24007 4648.1891
319.55399 curveto 4642.6742 327.86787 4639.91675 340.59355 4639.91675
357.73106 curveto 4639.91675 391.43257 4650.37152 408.28336 4671.2811
408.28345 curveto 4680.7949 408.28336 4688.3354 404.17418 4693.90263
395.95593 curveto 4699.46974 387.7375 4702.25333 375.31444 4702.25339
358.68669 curveto closepath 4684.92459 357.73106 moveto 4684.92455
371.30083 4683.68303 380.61813 4681.20007 385.683 curveto 4678.71703
390.74771 4675.35843 393.2801 4671.12428 393.28018 curveto 4661.92404
393.2801 4657.32394 381.4304 4657.32396 357.73106 curveto 4657.32394
345.62648 4658.39555 336.6755 4660.5388 330.8781 curveto 4662.682 325.08064
4666.2105 322.18193 4671.12428 322.18193 curveto 4675.9857 322.18193
4679.50113 325.12842 4681.67053 331.02144 curveto 4683.83986 336.91441
4684.92455 345.81761 4684.92459 357.73106 curveto closepath gsave 0.17254
0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4786.83269
421.37546 moveto 4786.83269 406.75446 lineto 4785.31668 407.1366 4784.0621
407.32773 4783.06897 407.32782 curveto 4778.2597 407.32773 4775.41078
403.79193 4774.52219 396.72043 curveto 4778.49493 390.60437 4780.48134
383.69205 4780.48141 375.98343 curveto 4780.48134 367.25537 4777.99834
359.8971 4773.03238 353.90857 curveto 4768.0663 347.91998 4761.37524
344.9257 4752.95918 344.92574 curveto 4749.77045 344.9257 4746.42493
345.49907 4742.92259 346.64586 curveto 4738.94975 344.79828 4736.96335
341.99513 4736.96338 338.23639 curveto 4736.96335 334.98724 4738.0219
332.88487 4740.139 331.92928 curveto 4742.25607 330.97363 4747.86246
330.20914 4756.95815 329.63579 curveto 4764.79918 329.1261 4770.70613
328.23419 4774.679 326.96005 curveto 4778.65176 325.68587 4781.8274
323.08977 4784.20592 319.17172 curveto 4786.58432 315.25368 4787.77354
310.10925 4787.77362 303.73843 curveto 4787.77354 293.92741 4784.66325
286.48949 4778.44272 281.42468 curveto 4772.22208 276.35991 4763.36165
273.82751 4751.86143 273.82748 curveto 4740.77934 273.82751 4732.68996
276.04137 4727.59328 280.46906 curveto 4722.49655 284.89679 4719.94821
290.77386 4719.94821 298.10027 curveto 4719.94821 307.40166 4723.79033
313.61319 4731.47461 316.7349 curveto 4725.72447 320.62108 4722.84941
325.877 4722.84941 332.50266 curveto 4722.84941 340.9121 4726.7438
347.37846 4734.53264 351.90176 curveto 4727.73701 357.38062 4724.33922
365.63081 4724.33922 376.65237 curveto 4724.33922 386.0811 4726.92677
393.71013 4732.1019 399.5395 curveto 4737.277 405.3687 4743.94191 408.28336
4752.09666 408.28345 curveto 4757.42857 408.28336 4762.42072 406.88177
4767.07315 404.0787 curveto 4767.90948 410.76796 4769.49077 415.40273
4771.817 417.983 curveto 4774.14314 420.56308 4777.52786 421.85316
4781.97122 421.85327 curveto 4783.278 421.85316 4784.89848 421.6939
4786.83269 421.37546 curveto closepath 4763.62306 376.27013 moveto
4763.62302 388.88425 4760.04227 395.19135 4752.88078 395.19144 curveto
4745.09193 395.19135 4741.19754 388.82054 4741.19756 376.079 curveto
4741.19754 363.71957 4744.96126 357.53989 4752.48872 357.53993 curveto
4759.91158 357.53989 4763.62302 363.78328 4763.62306 376.27013 curveto
closepath 4741.58961 313.48578 moveto 4737.04176 310.74634 4734.76785
306.63716 4734.76787 301.15826 curveto 4734.76785 296.57129 4736.23152
293.19476 4739.15887 291.02867 curveto 4742.08618 288.86263 4746.94766
287.77959 4753.7433 287.77956 curveto 4766.28899 287.77959 4772.56186
292.20729 4772.5619 301.0627 curveto 4772.56186 305.39485 4771.37262
308.3732 4768.99422 309.99776 curveto 4766.6157 311.62231 4761.92412
312.56201 4754.91946 312.81685 curveto 4749.01248 313.07167 4744.5692
313.29465 4741.58961 313.48578 curveto closepath gsave 0.17254 0.17254
0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4794.17764
405.98996 moveto 4810.56552 405.98996 lineto 4824.36583 339.66982 lineto
4838.5582 405.98996 lineto 4853.29945 405.98996 lineto 4827.58067 303.35619
lineto 4825.69879 295.90236 4823.97375 290.39162 4822.40556 286.82394
curveto 4820.83731 283.25632 4818.61568 280.37352 4815.74063 278.17557
curveto 4812.86555 275.97766 4809.15411 274.87871 4804.6063 274.87866
curveto 4801.88805 274.87871 4799.09138 275.32466 4796.21632 276.21654
curveto 4796.21632 292.07985 lineto 4798.30728 291.63391 4800.21527
291.41093 4801.94032 291.41092 curveto 4806.1745 291.41093 4809.18025
292.66917 4810.95758 295.18562 curveto 4812.73486 297.7021 4814.64287
303.54732 4816.68156 312.72128 curveto closepath gsave 0.17254 0.17254
0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 4964.66948
358.68669 moveto 4964.66942 324.28429 4954.21465 307.08311 4933.30513
307.08311 curveto 4923.6867 307.08311 4916.12006 311.24007 4910.60518
319.55399 curveto 4905.09027 327.86787 4902.33282 340.59355 4902.33284
357.73106 curveto 4902.33282 391.43257 4912.7876 408.28336 4933.69719
408.28345 curveto 4943.211 408.28336 4950.7515 404.17418 4956.31873
395.95593 curveto 4961.88583 387.7375 4964.66942 375.31444 4964.66948
358.68669 curveto closepath 4947.34068 357.73106 moveto 4947.34062
371.30083 4946.09912 380.61813 4943.61617 385.683 curveto 4941.1331
390.74771 4937.7745 393.2801 4933.54036 393.28018 curveto 4924.34013
393.2801 4919.74002 381.4304 4919.74005 357.73106 curveto 4919.74002
345.62648 4920.81165 336.6755 4922.9549 330.8781 curveto 4925.0981
325.08064 4928.62659 322.18193 4933.54036 322.18193 curveto 4938.4018
322.18193 4941.91722 325.12842 4944.08662 331.02144 curveto 4946.25595
336.91441 4947.34062 345.81761 4947.34068 357.73106 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 5005.96597
405.98996 moveto 5020.15834 405.98996 lineto 5020.15834 389.93552 lineto
5005.96597 389.93552 lineto 5005.96597 309.47217 lineto 4989.97015
309.47217 lineto 4989.97015 389.93552 lineto 4979.61992 389.93552 lineto
4979.61992 405.98996 lineto 4989.97015 405.98996 lineto 4990.12697
417.4573 4990.93721 425.37303 4992.4009 429.73715 curveto 4993.86455
434.10103 4996.25607 437.52534 4999.57549 440.01009 curveto 5002.89485
442.49457 5007.40347 443.73688 5013.10136 443.73701 curveto 5016.39458
443.73688 5019.60942 443.35463 5022.7459 442.59027 curveto 5022.7459
426.72694 lineto 5020.49808 427.17279 5018.43326 427.39577 5016.55144
427.39587 curveto 5013.31042 427.39577 5010.9189 426.66312 5009.37685
425.19795 curveto 5007.83473 423.73254 5006.88074 421.8691 5006.51485
419.60756 curveto 5006.14891 417.34583 5005.96594 412.80663 5005.96597
405.98996 curveto closepath gsave 0.17254 0.17254 0.16862  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 5128.15671
353.3352 moveto 5144.46617 350.5639 lineto 5141.12056 321.5767 5129.43735
307.08311 5109.4165 307.08311 curveto 5096.40027 307.08311 5086.70346
313.16724 5080.32607 325.3355 curveto 5073.94864 337.50371 5070.75993
353.78111 5070.75993 374.16776 curveto 5070.75993 396.14697 5074.13159
412.99774 5080.87494 424.72014 curveto 5087.61826 436.4423 5097.34119
442.30345 5110.0438 442.30357 curveto 5129.69872 442.30345 5141.2251
427.45947 5144.62299 397.7716 curveto 5128.15671 394.80919 lineto 5126.37933
414.5586 5120.36783 424.43333 5110.1222 424.43346 curveto 5096.4264
424.43333 5089.57852 407.26402 5089.57855 372.92545 curveto 5089.57852
340.94394 5096.4264 324.95323 5110.1222 324.95325 curveto 5115.61092
324.95323 5119.70134 327.39006 5122.39351 332.26375 curveto 5125.08554
337.13739 5127.0066 344.1612 5128.15671 353.3352 curveto closepath
gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 5165.76808
439.91452 moveto 5182.15596 439.91452 lineto 5182.15596 393.18463 lineto
5185.86739 403.25041 5192.16638 408.28336 5201.05298 408.28345 curveto
5205.60077 408.28336 5209.42982 407.00919 5212.54018 404.46097 curveto
5215.65042 401.91255 5217.81978 398.5201 5219.04828 394.28358 curveto
5220.27666 390.04692 5220.89087 382.03563 5220.89093 370.24971 curveto
5220.89093 309.47217 lineto 5204.58147 309.47217 lineto 5204.58147
370.24971 lineto 5204.58142 380.31552 5203.64049 386.51112 5201.75868
388.83655 curveto 5199.87677 391.1618 5197.55058 392.32448 5194.7801
392.32457 curveto 5186.36398 392.32448 5182.15593 383.11867 5182.15596
364.7071 curveto 5182.15596 309.47217 lineto 5165.76808 309.47217 lineto
closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 5263.99088
418.9864 moveto 5246.89731 418.9864 lineto 5246.89731 440.10565 lineto
5263.99088 440.10565 lineto closepath 5247.28935 405.98996 moveto 5263.59882
405.98996 lineto 5263.59882 309.47217 lineto 5247.28935 309.47217 lineto
closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 5290.4679 405.98996
moveto 5305.6012 405.98996 lineto 5305.6012 391.08226 lineto 5309.26035
402.54962 5315.79457 408.28336 5325.20392 408.28345 curveto 5330.5358
408.28336 5334.83533 406.7225 5338.10251 403.6009 curveto 5341.36957
400.47911 5343.43437 396.73627 5344.29697 392.37234 curveto 5345.15941
388.00827 5345.59067 381.11186 5345.59074 371.68314 curveto 5345.59074
309.47217 lineto 5329.28128 309.47217 lineto 5329.28128 370.63196 lineto
5329.28123 379.04135 5328.68008 384.75916 5327.47783 387.78537 curveto
5326.27548 390.81142 5323.71407 392.32448 5319.79356 392.32457 curveto
5315.71616 392.32448 5312.54053 390.39731 5310.26665 386.54306 curveto
5307.99269 382.68864 5306.85574 375.02776 5306.85577 363.56035 curveto
5306.85577 309.47217 lineto 5290.4679 309.47217 lineto closepath gsave
0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  newpath 5386.57387
378.65918 moveto 5370.81328 381.04823 lineto 5371.85875 389.64874 5375.1128
396.33809 5380.57542 401.11629 curveto 5386.03802 405.8943 5392.74216
408.28336 5400.68782 408.28345 curveto 5407.79703 408.28336 5413.48181
406.5473 5417.74219 403.0753 curveto 5422.00246 399.60313 5424.68149
395.47803 5425.7793 390.70001 curveto 5426.87698 385.92183 5427.42586
378.69096 5427.42593 369.0074 curveto 5427.42593 336.13402 lineto 5427.42586
322.819 5427.89633 313.93173 5428.83733 309.47217 curveto 5413.39038
309.47217 lineto 5412.71077 312.97612 5412.37099 318.32759 5412.37105
325.52661 curveto 5407.40497 313.23094 5399.98209 307.08311 5390.10236
307.08311 curveto 5383.41127 307.08311 5378.04013 309.58366 5373.98892
314.58475 curveto 5369.93768 319.58582 5367.91206 326.38666 5367.91208
334.98727 curveto 5367.91206 345.49907 5370.87862 353.81297 5376.8117
359.92899 curveto 5382.74478 366.04492 5393.02966 369.1029 5407.66638
369.10297 curveto 5408.39818 369.1029 5409.5482 369.07104 5411.11647
369.0074 curveto 5411.11647 372.92545 lineto 5411.11642 379.80585 5410.26697
384.99806 5408.56812 388.50208 curveto 5406.86917 392.00594 5403.82422
393.75792 5399.43324 393.758 curveto 5392.2717 393.75792 5387.98523
388.72498 5386.57387 378.65918 curveto closepath 5411.11647 356.48875
moveto 5409.02547 356.74355 5407.4311 356.87096 5406.3334 356.871 curveto
5392.11487 356.87096 5385.00563 350.08604 5385.00565 336.51627 curveto
5385.00563 326.6415 5388.5341 321.70412 5395.59111 321.70413 curveto
5399.72072 321.70412 5403.34068 324.37985 5406.45102 329.73135 curveto
5409.56126 335.08281 5411.11642 342.44109 5411.11647 351.80621 curveto
closepath gsave 0.17254 0.17254 0.16862  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
